n_mean <- 500
n_sd <- 0
n_target <- 100
honesty <- T
mods <- list(list(covars_fix="age", covars_rand="age", lin=T,
eps_study_m=0.05, eps_study_tau=0.05, eps_study_inter=0.05),
list(covars_fix="age", covars_rand="age", lin=T,
eps_study_m=1, eps_study_tau=0.05, eps_study_inter=0.05),
list(covars_fix="age", covars_rand="age", lin=T,
eps_study_m=1, eps_study_tau=0.5, eps_study_inter=0.05),
list(covars_fix="age", covars_rand="age", lin=T,
eps_study_m=1, eps_study_tau=1, eps_study_inter=0.5),
list(covars_fix=c("age", "madrs"), covars_rand=c("age", "madrs"),
lin=T, eps_study_m=0.05, eps_study_tau=0.05, eps_study_inter=c(0.05,0.05)),
list(covars_fix=c("age", "madrs"), covars_rand=c("age", "madrs"),
lin=T, eps_study_m=1, eps_study_tau=0.5, eps_study_inter=c(0.5,0.05)),
list(covars_fix=c("age2", "sex"), covars_rand=c("age2"),
lin=T, eps_study_m=1, eps_study_tau=0.5, eps_study_inter=0.05),
list(covars_fix=c("age2", "sex"), covars_rand=c("age2"),
lin=T, eps_study_m=1, eps_study_tau=0.5, eps_study_inter=0.5),
list(covars_fix="age", covars_rand="age", lin=F,
eps_study_m=0.05, eps_study_tau=0.05, eps_study_inter=0.05),
list(covars_fix="age", covars_rand="age", lin=F,
eps_study_m=1, eps_study_tau=0.05, eps_study_inter=0.05),
list(covars_fix="age", covars_rand="age", lin=F,
eps_study_m=1, eps_study_tau=0.5, eps_study_inter=0.05),
list(covars_fix="age", covars_rand="age", lin=F,
eps_study_m=1, eps_study_tau=1, eps_study_inter=0.5))
settings <- expand.grid(moderators = c(1:length(mods)),
distribution = c("same", "varying_madrs", "separate_age"),
target_dist = c("same", "different"),
iteration = c(1:100))
i=1
moderators <- settings$moderators[i]
covars_fix <- mods[[moderators]]$covars_fix
covars_rand <- mods[[moderators]]$covars_rand
eps_study_m <- mods[[moderators]]$eps_study_m
eps_study_tau <- mods[[moderators]]$eps_study_tau
eps_study_inter <- mods[[moderators]]$eps_study_inter
lin <- mods[[moderators]]$lin
distribution <- settings$distribution[i]
target_dist <- settings$target_dist[i]
iteration <- settings$iteration[i]
seed <- i
#run main function
set.seed(seed)
## Simulate training and target (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, n_target, covars_fix, covars_rand, lin,
eps_study_m, eps_study_tau, eps_study_inter,
distribution, target_dist)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
## Mixed effects model: Correct
#change for scenario with age^2
if ("age2" %in% covars_fix) {
main_eff <- "Y ~ madrs + sex + age2 + W + "
} else {
main_eff <- "Y ~ madrs + sex + age + W + "
}
formula <- as.formula(paste0(main_eff,
paste("W", covars_fix, sep=":", collapse=" + "),
" + (W + ",
paste("W", covars_rand, sep=":", collapse=" + "),
" | S)"))
## Causal Forest
if ("age2" %in% covars_fix) {
covars <- c("sex", "smstat", "weight", "age2", "madrs")
} else {
covars <- c("sex", "smstat", "weight", "age", "madrs")
}
feat <- dplyr::select(train_dat, c(S, all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
tau_forest <- grf::causal_forest(X=feat, Y=train_dat$Y, W=train_dat$W,
num.threads=3, honesty=T, num.trees=1000)
tau_hat <- predict(tau_forest, estimate.variance=T)
## BART: S-learner
#use covariates from above
#update features to include W
feat <- dplyr::select(train_dat, c(W, S, all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
#include counterfactual covariates (swap control and treatment)
feat_cf <- feat %>%
mutate(W = as.numeric(W == 0))
y <- as.numeric(train_dat$Y)
#run bart
sbart <- dbarts::bart(x.train=as.matrix(feat), y.train=y, x.test=as.matrix(feat_cf), keeptrees=T)
#get pairwise differences
w <- train_dat$W
w
pairwise_diffs <- sbart$yhat.train - sbart$yhat.test #some of these are the wrong order
View(pairwise_diffs)
nrow(train_dat)
matrix1 <- matrix(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15),
nrow=3,byrow=TRUE)
matrix1
vec <- c(-1,1,1,-1,-1)
sweep(matrix1, 2, vec, "*")
sweep(matrix1, 1, vec, "*")
w_fac <- ifelse(w == 1, 1, -1)
w_fac
pairwise_diffs <- sweep(sbart$yhat.train - sbart$yhat.test, #some of these are the wrong order
2, w_fac, "*")
pairwise_diffs2 <- sbart$yhat.train - sbart$yhat.test
for (i in 1:ncol(pairwise_diffs2)) {if (w[i]==0) {pairwise_diffs2[,i]=-pairwise_diff2[,i]}}
for (i in 1:ncol(pairwise_diffs2)) {if (w[i]==0) {pairwise_diffs2[,i]=-pairwise_diffs2[,i]}}
View(pairwise_diffs2)
all.equal(pairwise_diffs, pairwise_diffs2)
View(pairwise_diffs)
?quantile
lower_cate <- apply(pairwise_diffs, 2, quantile(probs=.025))
#estimate mean and variance
means_cate <- apply(pairwise_diffs, 2, mean)
lower_cate <- apply(pairwise_diffs, 2, quantile(probs=.025))
?apply
lower_cate <- apply(pairwise_diffs, 2, quantile, probs=.025)
lower_cate
lower_cate[1]
quantile(pairwise_diffs[,1], probs=.025)
upper_cate[1]
upper_cate <- apply(pairiwse_diffs, 2, quantile, probs=.975)
upper_cate <- apply(pairwise_diffs, 2, quantile, probs=.975)
upper_cate[1]
quantile(pairwise_diffs[,1], probs=.975)
quantile(pairwise_diffs[,30], probs=.975)
upper_cate[30]
#set up one row per study for all rows of target data
new_dat <- target_dat %>%
slice(rep(1:n(), each=K)) %>%
mutate(S = rep(1:K, nrow(target_dat)))
new_feat <- new_dat %>%
dplyr::select(c(W, S, all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
#define counterfactual
new_feat_cf <- new_feat %>%
mutate(W = as.numeric(W == 0))
#predict on target data
w_target <- target_dat$W
w_target_fac <- ifelse(w_target == 1, 1, -1)
target_pred <- predict(sbart, new_feat)
target_pred_cf <- predict(sbart, new_feat_cf)
dim(target_pred)
K
pairwise_diffs <- sweep(target_pred - target_pred_cf, #some of these are the wrong order
2, w_target_fac, "*") #multiply by -1 if the person was in control group
head(new_dat$W)
View(new_dat)
#set up one row per study for all rows of target data
new_dat <- target_dat %>%
slice(rep(1:n(), each=K)) %>%
mutate(S = rep(1:K, nrow(target_dat)))
new_feat <- new_dat %>%
dplyr::select(c(W, S, all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
#define counterfactual
new_feat_cf <- new_feat %>%
mutate(W = as.numeric(W == 0))
#predict on target data
w_target <- new_dat$W
w_target_fac <- ifelse(w_target == 1, 1, -1)
target_pred <- predict(sbart, new_feat)
target_pred_cf <- predict(sbart, new_feat_cf)
length(w_target_fac)
head(w_target_fac)
(w_target_fac)
target_dat$W[4]
target_dat$W[4]
target_dat$W[5]
pairwise_diffs <- sweep(target_pred - target_pred_cf, #some of these are the wrong order
2, w_target_fac, "*") #multiply by -1 if the person was in control group
hist(pairwise_diffs)
sum(pairwise_diffs <0)
min(pairwise_diffs)
max(pairwise_diffs)
means_cate_target <- lower_cate_target <- upper_cate_target <- c()
i=1
inds <- (K*(i-1)+1):(K*i)
pairwise_diffs_inds <- c(pairwise_diffs[,inds])
inds
pairwise_diffs_inds
means_cate_target <- c(means_cate_target, mean(pairwise_diffs_inds))
quantile(pairwise_diffs_inds, probs=.025)
quantile(pairwise_diffs[,1:10],probs=.025)
library(tidyverse)
library(dbarts)
source("R/BART_OOSEst.R")
source("R/MDD_Generation_OOSEst.R")
source("R/Comparing_OOSEst.R")
# set up parameters
K <- 10
n_mean <- 200
n_sd <- 0
n_target <- 100
honesty <- T
covars_fix <- "age"
covars_rand <- "age"
lin <- T
distribution <- "same"
target_dist <- "same"
eps_opt <- list(list(eps_study_m=0.05, eps_study_tau=0.05, eps_study_inter=0.05),
list(eps_study_m=1, eps_study_tau=0.5, eps_study_inter=0.05))
settings <- expand.grid(moderators=c(1:2),
iteration = c(1:100))
settings
#run iterations
res <- data.frame()
i=1
#Setup
moderators <- settings$moderators[i]
eps_study_m <- eps_opt[[moderators]]$eps_study_m
eps_study_tau <- eps_opt[[moderators]]$eps_study_tau
eps_study_inter <- eps_opt[[moderators]]$eps_study_inter
iteration <- settings$iteration[i]
seed <- i
seed
moderators
eps_study_m
iteration
set.seed(seed)
#generate data
sim_dat <- gen_mdd(K, n_mean, n_sd, n_target, covars_fix, covars_rand, lin,
eps_study_m, eps_study_tau, eps_study_inter,
distribution, target_dist)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
#set up variables
if ("age2" %in% covars_fix) {
covars <- c("sex", "smstat", "weight", "age2", "madrs")
} else {
covars <- c("sex", "smstat", "weight", "age", "madrs")
}
#update features to include W
feat <- dplyr::select(train_dat, c(W, S, all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
#include counterfactual covariates (swap control and treatment)
feat_cf <- feat %>%
mutate(W = as.numeric(W == 0))
y <- as.numeric(train_dat$Y)
#run bart
sbart <- dbarts::bart(x.train=as.matrix(feat), y.train=y, x.test=as.matrix(feat_cf), keeptrees=T)
#S-BART credible interval - training - pairwise difference = F
sb_train <- sbart_ci(train_dat, sbart)
#S-BART credible interval - target - pairwise difference = F
sb_target <- sbart_target(K, target_dat, sbart, covars)
#S-BART credible interval - training - pairwise difference = T
sb_train_p <- sbart_ci(train_dat, sbart, pairwise_diff=T)
#S-BART credible interval - target - pairwise difference = T
sb_target_p <- sbart_target(K, target_dat, sbart, covars, pairwise_diff=T)
rm(sbart)
#calculate mean and CIs for individuals and assess accuracy
sb_res <- c(assess_interval(sb_train, sb_target),
avg_train_var = mean(sb_train$var),
avg_target_var = mean(sb_target$var))
#calculate mean and CIs for individuals and assess accuracy
sb_res <- assess_interval(sb_train, sb_target)
sb_res_p <- assess_interval(sb_train_p, sb_target_p)
sb_res
sb_res_p
View(sb_target)
library(tidyverse)
library(dbarts)
source("R/BART_OOSEst.R")
source("R/MDD_Generation_OOSEst.R")
source("R/Comparing_OOSEst.R")
# set up parameters
K <- 10
n_mean <- 200
n_sd <- 0
n_target <- 100
honesty <- T
covars_fix <- "age"
covars_rand <- "age"
lin <- T
distribution <- "same"
target_dist <- "same"
eps_opt <- list(list(eps_study_m=0.05, eps_study_tau=0.05, eps_study_inter=0.05),
list(eps_study_m=1, eps_study_tau=0.5, eps_study_inter=0.05))
settings <- expand.grid(moderators=c(1:2),
iteration = c(1:100))
#run iterations
res <- data.frame()
i=1
#Setup
moderators <- settings$moderators[i]
eps_study_m <- eps_opt[[moderators]]$eps_study_m
eps_study_tau <- eps_opt[[moderators]]$eps_study_tau
eps_study_inter <- eps_opt[[moderators]]$eps_study_inter
iteration <- settings$iteration[i]
seed <- i
set.seed(seed)
#generate data
sim_dat <- gen_mdd(K, n_mean, n_sd, n_target, covars_fix, covars_rand, lin,
eps_study_m, eps_study_tau, eps_study_inter,
distribution, target_dist)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
#set up variables
if ("age2" %in% covars_fix) {
covars <- c("sex", "smstat", "weight", "age2", "madrs")
} else {
covars <- c("sex", "smstat", "weight", "age", "madrs")
}
#update features to include W
feat <- dplyr::select(train_dat, c(W, S, all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
#include counterfactual covariates (swap control and treatment)
feat_cf <- feat %>%
mutate(W = as.numeric(W == 0))
y <- as.numeric(train_dat$Y)
#run bart
sbart <- dbarts::bart(x.train=as.matrix(feat), y.train=y, x.test=as.matrix(feat_cf), keeptrees=T)
#S-BART credible interval - training - pairwise difference = F
sb_train <- sbart_ci(train_dat, sbart)
#S-BART credible interval - target - pairwise difference = F
sb_target <- sbart_target(K, target_dat, sbart, covars)
#S-BART credible interval - training - pairwise difference = T
sb_train_p <- sbart_ci(train_dat, sbart, pairwise_diff=T)
#S-BART credible interval - target - pairwise difference = T
sb_target_p <- sbart_target(K, target_dat, sbart, covars, pairwise_diff=T)
#calculate mean and CIs for individuals and assess accuracy
sb_res <- assess_interval(sb_train, sb_target)
sb_res_p <- assess_interval(sb_train_p, sb_target_p)
sb_res
sb_res_p
#report results
iter_res <- cbind(sb_res, sb_res_p) %>%
data.frame() %>%
rownames_to_column("Metric") %>%
mutate(moderators = moderators)
iter_res
#report results
iter_res <- cbind(sb_res, sb_res_p) %>%
data.frame() %>%
rownames_to_column("Metric") %>%
mutate(moderators = moderators,
iteration = iteration)
iter_res
View(sb_target_p)
View(sb_target_p %>% mutate(covered = ifelse(tau <= upper & tau >= lower, 1, 0)))
table1(~., train_dat)
table1::table1(~., train_dat)
View(train_dat)
sqrt(165)
#check results
res <- readRDS("Data/BART_vartest_5Oct2023.RDS")
View(res)
# set up parameters
K <- 5
n_mean <- 500
n_sd <- 0
n_target <- 200
honesty <- T
covars_fix <- "age"
covars_rand <- "age"
lin <- T
distribution <- "same"
target_dist <- "same"
eps_opt <- list(list(eps_study_m=0.05, eps_study_tau=0.05, eps_study_inter=0.05),
list(eps_study_m=1, eps_study_tau=0.5, eps_study_inter=0.05))
settings <- expand.grid(moderators=c(1:2),
iteration = c(1:100))
#run iterations
res <- data.frame()
i=1
#Setup
moderators <- settings$moderators[i]
eps_study_m <- eps_opt[[moderators]]$eps_study_m
eps_study_tau <- eps_opt[[moderators]]$eps_study_tau
eps_study_inter <- eps_opt[[moderators]]$eps_study_inter
iteration <- settings$iteration[i]
seed <- i
set.seed(seed)
#generate data
sim_dat <- gen_mdd(K, n_mean, n_sd, n_target, covars_fix, covars_rand, lin,
eps_study_m, eps_study_tau, eps_study_inter,
distribution, target_dist)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
#set up variables
if ("age2" %in% covars_fix) {
covars <- c("sex", "smstat", "weight", "age2", "madrs")
} else {
covars <- c("sex", "smstat", "weight", "age", "madrs")
}
#update features to include W
feat <- dplyr::select(train_dat, c(W, S, all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
#include counterfactual covariates (swap control and treatment)
feat_cf <- feat %>%
mutate(W = as.numeric(W == 0))
y <- as.numeric(train_dat$Y)
#run bart
sbart <- dbarts::bart(x.train=as.matrix(feat), y.train=y, x.test=as.matrix(feat_cf), keeptrees=T)
#S-BART credible interval - training - pairwise difference = F
sb_train <- sbart_ci(train_dat, sbart)
#S-BART credible interval - target - pairwise difference = F
sb_target <- sbart_target(K, target_dat, sbart, covars)
#S-BART credible interval - training - pairwise difference = T
sb_train_p <- sbart_ci(train_dat, sbart, pairwise_diff=T)
#S-BART credible interval - target - pairwise difference = T
sb_target_p <- sbart_target(K, target_dat, sbart, covars, pairwise_diff=T)
#calculate mean and CIs for individuals and assess accuracy
sb_res <- assess_interval(sb_train, sb_target)
sb_res_p <- assess_interval(sb_train_p, sb_target_p)
sb_res
source("R/Comparing_OOSEst.R")
#calculate mean and CIs for individuals and assess accuracy
sb_res <- assess_interval(sb_train, sb_target)
sb_res_p <- assess_interval(sb_train_p, sb_target_p)
sb_res
sb_res
dim(sb_res)
length(sb_res)
nrow(train_dat)
nrow(filter(res, grepl("bias",Metric)==F))
names(res)
#check results
res <- readRDS("Data/BART_vartest_5Oct2023.RDS")
nrow(filter(res, grepl("bias",Metric)==F))
1600/100
View(filter(res, grepl("bias",Metric)==F))
#check results
res <- readRDS("Data/BART_vartest_5Oct2023.RDS") %>%
filter(grepl("bias", Metric) == F)
nrow(res)
#calculate mean and CIs for individuals and assess accuracy
sb_res <- assess_interval(sb_train, sb_target)
sb_res_p <- assess_interval(sb_train_p, sb_target_p)
sb_res
source("R/Comparing_OOSEst.R")
#calculate mean and CIs for individuals and assess accuracy
sb_res <- assess_interval(sb_train, sb_target)
sb_res_p <- assess_interval(sb_train_p, sb_target_p)
sb_res
#View(res)
colnames(res) <- c("Metric", "S_NonPair", "S_Pair",
"Moderators", "Iteration")
#mse - should always be equal
mse <- filter(res, grepl("mse", Metric)==T)
sum(round(mse$S_NonPair, 10) != round(mse$S_Pair, 10)) #0 is what we want to see
#coverage - want close to 95%
res %>%
filter(grepl("coverage", Metric)==T) %>%
pivot_longer(cols=c(S_NonPair, S_Pair), names_to = "Method", values_to = "Coverage") %>%
ggplot(aes(x=Metric, color=Method, y=Coverage)) +
geom_boxplot()
#coverage - want close to 95%
res %>%
filter(grepl("coverage", Metric)==T) %>%
pivot_longer(cols=c(S_NonPair, S_Pair), names_to = "Method", values_to = "Coverage") %>%
ggplot(aes(x=Metric, color=Method, y=Coverage)) +
geom_boxplot() +
facet_wrap(~moderators)
res %>%
filter(grepl("coverage", Metric)==T) %>%
pivot_longer(cols=c(S_NonPair, S_Pair), names_to = "Method", values_to = "Coverage")
#coverage - want close to 95%
res %>%
filter(grepl("coverage", Metric)==T) %>%
pivot_longer(cols=c(S_NonPair, S_Pair), names_to = "Method", values_to = "Coverage") %>%
ggplot(aes(x=Metric, color=Method, y=Coverage)) +
geom_boxplot() +
facet_wrap(~Moderators)
View(res)
readRDS("Data/BART_vartest_5Oct2023.RDS") %>% View()
library(tidyverse)
library(lme4)
library(rsample)
library(multcomp)
library(MASS)
library(grf)
library(dbarts)
library(fastDummies)
source("R/MDD_Generation_OOSEst.R")
source("R/MA_OOSEst.R")
source("R/Bootstrap_OOSEst.R")
source("R/BART_OOSEst.R")
source("R/Comparing_OOSEst.R")
# set up parameters
K <- 10
n_mean <- 500
n_sd <- 0
n_target <- 100
honesty <- T
mods <- list(list(covars_fix="age", covars_rand="age", lin=T,
eps_study_m=0.05, eps_study_tau=0.05, eps_study_inter=0.05),
list(covars_fix="age", covars_rand="age", lin=T,
eps_study_m=1, eps_study_tau=0.05, eps_study_inter=0.05),
list(covars_fix="age", covars_rand="age", lin=T,
eps_study_m=1, eps_study_tau=0.5, eps_study_inter=0.05),
list(covars_fix="age", covars_rand="age", lin=T,
eps_study_m=1, eps_study_tau=1, eps_study_inter=0.5),
list(covars_fix=c("age", "madrs"), covars_rand=c("age", "madrs"),
lin=T, eps_study_m=0.05, eps_study_tau=0.05, eps_study_inter=c(0.05,0.05)),
list(covars_fix=c("age", "madrs"), covars_rand=c("age", "madrs"),
lin=T, eps_study_m=1, eps_study_tau=0.5, eps_study_inter=c(0.5,0.05)),
list(covars_fix=c("age2", "sex"), covars_rand=c("age2"),
lin=T, eps_study_m=1, eps_study_tau=0.5, eps_study_inter=0.05),
list(covars_fix=c("age2", "sex"), covars_rand=c("age2"),
lin=T, eps_study_m=1, eps_study_tau=0.5, eps_study_inter=0.5),
list(covars_fix="age", covars_rand="age", lin=F,
eps_study_m=0.05, eps_study_tau=0.05, eps_study_inter=0.05),
list(covars_fix="age", covars_rand="age", lin=F,
eps_study_m=1, eps_study_tau=0.05, eps_study_inter=0.05),
list(covars_fix="age", covars_rand="age", lin=F,
eps_study_m=1, eps_study_tau=0.5, eps_study_inter=0.05),
list(covars_fix="age", covars_rand="age", lin=F,
eps_study_m=1, eps_study_tau=1, eps_study_inter=0.5))
settings <- expand.grid(moderators = c(1:length(mods)),
distribution = c("same", "varying_madrs", "separate_age"),
target_dist = c("same", "different"),
iteration = c(1:100))
nrow(settings)
