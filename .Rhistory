filter(Metric == "target_coverage",
target_dist == "different",
model != "glht") %>%
ggplot(aes(x=eps, y=Mean, group=Method, color=spec)) +
geom_jitter(aes(shape=model), size=2.5, width=.2, height=0) +
facet_grid(distribution~eps_study_m, scales='free') +
scale_y_continuous(labels = scales::percent) +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Variability of Trt and Trt*Age Coefficients") +
ylab("CI Coverage Percent in Target Sample") +
ggtitle("Different Target Distribution")
all_long %>%
filter(Metric == "target_coverage",
target_dist == "same",
model != "glht") %>%
ggplot(aes(x=eps, y=Mean, group=Method, color=spec)) +
geom_jitter(aes(shape=model), size=2.5, width=.2, height=0) +
facet_grid(distribution~eps_study_m, scales='free') +
scale_y_continuous(labels = scales::percent) +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Variability of Trt and Trt*Age Coefficients") +
ylab("CI Coverage Percent in Target Sample") +
ggtitle("Same Target Distribution")
all_long %>%
filter(Metric == "target_coverage",
target_dist == "same",
model != "glht") %>%
ggplot(aes(x=eps, y=Mean, group=Method, color=spec)) +
geom_jitter(aes(shape=model), size=2.5, width=.2, height=0) +
facet_grid(distribution~eps_study_m, scales='free') +
scale_y_continuous(labels = scales::percent) +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Variability of Trt and Trt*Age Coefficients") +
ylab("CI Coverage Percent in Target Sample") +
ggtitle("Same Target Distribution")
all_long %>%
filter(Metric == "target_coverage",
target_dist == "same",
model != "GLHT") %>%
ggplot(aes(x=eps, y=Mean, group=Method, color=spec)) +
geom_jitter(aes(shape=model), size=2.5, width=.2, height=0) +
facet_grid(distribution~eps_study_m, scales='free') +
scale_y_continuous(labels = scales::percent) +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Variability of Trt and Trt*Age Coefficients") +
ylab("CI Coverage Percent in Target Sample") +
ggtitle("Same Target Distribution")
all_long %>%
filter(Metric == "target_length",
target_dist == "same") %>%
ggplot(aes(x=eps, y=Mean, group=Method, color=spec)) +
geom_jitter(aes(shape=model), size=2.5, width=.2, height=0) +
facet_grid(distribution~eps_study_m, scales='free') +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Variability of Trt and Trt*Age Coefficients") +
ylab("Mean CI Length in Target Sample") +
ggtitle("Same Target Distribution")
unique(all_long$Metric)
head(all_long)
#same target dist, same training dist
all_long %>%
filter(Metric == "target_coverage",
target_dist == "same",
model != "GLHT",
distribution == "same") %>%
ggplot(aes(x=eps_study_age, y=Mean, group=Method, color=spec)) +
geom_jitter(aes(shape=model), size=2.5, width=.2, height=0) +
facet_grid(eps_study_tau~eps_study_m, scales='free') +
scale_y_continuous(labels = scales::percent) +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Variability Trt*Age Coefficients") +
ylab("CI Coverage Percent in Target Sample") +
ggtitle("Same Target Distribution and Same Training Distribution")
all_long %>%
filter(Metric == "target_coverage",
target_dist == "same",
model != "GLHT",
distribution == "same") %>%
ggplot(aes(x=eps_study_age, y=Mean, group=Method, color=spec)) +
geom_jitter(aes(shape=model), size=2.5, width=.2, height=0) +
facet_grid(eps_study_tau~eps_study_m, scales='free') +
scale_y_continuous(labels = scales::percent) +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Variability Trt*Age Coefficients") +
ylab("CI Coverage Percent in Target Sample") +
ggtitle("Same Target Distribution and Same Training Distribution")
all_long %>%
filter(Metric == "target_coverage",
target_dist == "same",
model != "GLHT",
distribution == "same") %>%
ggplot(aes(x=eps_study_age, y=Mean, group=Method, color=spec)) +
geom_jitter(aes(shape=model), size=2.5, width=.2, height=0) +
facet_grid(eps_study_tau~eps_study_m) +
scale_y_continuous(labels = scales::percent) +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Variability Trt*Age Coefficients") +
ylab("CI Coverage Percent in Target Sample") +
ggtitle("Same Target Distribution and Same Training Distribution")
all_long %>%
filter(Metric == "target_coverage",
target_dist == "same",
model != "GLHT",
distribution == "same") %>%
ggplot(aes(x=factor(eps_study_age), y=Mean, group=Method, color=spec)) +
geom_jitter(aes(shape=model), size=2.5, width=.2, height=0) +
facet_grid(eps_study_tau~eps_study_m) +
scale_y_continuous(labels = scales::percent) +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Variability Trt*Age Coefficients") +
ylab("CI Coverage Percent in Target Sample") +
ggtitle("Same Target Distribution and Same Training Distribution")
View(all_long)
View(filter(all_long, Metric=="target_mse"))
source("R/MDD_Generation_OOSEst.R")
source("R/MA_OOSEst.R")
K=10
n_mean=200
n_sd=0
n_target=100
eps_study_m=0.05
eps_study_tau=0.05,
eps_study_tau=0.05
eps_study_age=0.05
distribution="same"
target_dist="same"
## Simulate training and target (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, n_target, eps_study_m, eps_study_tau,
eps_study_age, distribution, target_dist)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
View(train_dt)
View(train_dat)
## Fit mixed effects models
#correct
mod <- lmer(Y ~  madrs + sex + W*age +
(W + W:age | S), data=train_dat,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=10000)))
sum <- summary(mod)
train2 <- mutate(train_dat, age = (age-mean(age))/sd(age))
View(train2)
mean(train2$age)
sd(train2$age)
## Fit mixed effects models
#correct
mod2 <- lmer(Y ~  madrs + sex + W*age +
(W + W:age | S), data=train2,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=10000)))
sum2 <- summary(mod2)
sum
sum2
2.5641034+0.8682667*train2$age -> age2
sum
-0.5729206+0.0696481*train_dat$age -> age1
View(cbind(age1, age2))
View(all_long)
View(filter(all_long, Metric=="target_mse"))
x <- filter(all_long, Metric=="target_mse", eps=="0.05_0")
ggplot(x, aes(x=Mean)) + geom_histogram()
x <- filter(all_long, Metric=="target_mse", eps=="0.5_0.05")
ggplot(x, aes(x=Mean)) + geom_histogram()
x <- filter(all_long, Metric=="target_mse", eps=="0.5_0.05", Method=="manual_res")
ggplot(x, aes(x=Mean)) + geom_histogram()
filter(all_long, Metric=="target_mse", eps=="0.5_0.5", Method=="manual_res") %>% ggplot(aes(x=Mean)) + geom_histogram()
filter(all_long, Metric=="target_mse", eps=="1_1", Method=="manual_res") %>% ggplot(aes(x=Mean)) + geom_histogram()
x <- filter(all_long, Metric=="target_mse", eps=="1_1", Method=="manual_res")
quantile(x$Mean)
eps_study_tau=1
eps_study_age=1
## Simulate training and target (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, n_target, eps_study_m, eps_study_tau,
eps_study_age, distribution, target_dist)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
View(train_dat)
#training data
train_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
#define covariance matrix
Sigma <- data.frame(age=c(165.6471, 0.2448, -0.5180, 1.6408, -0.9666),
sex=c(0.2448, 0.2183, -0.0218, -1.9030, 0.1380),
smstat=c(-0.5180, -0.0218, 0.2118, -0.1429, 0.1155),
weight=c(1.6408, -1.9030, -0.1428, 452.6100, -7.6864),
madrs=c(-0.9666, 0.1380, 0.1155, -7.6864, 17.5343),
row.names=c("age","sex","smstat","weight","madrs"))
k=1
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
#simulate data
dat <- MASS::mvrnorm(n=n, mu=mu, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n, mean=0, sd=.05),
W = rbinom(n=n, size=1, prob=.5),
eps_m = rnorm(n=1, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=1, mean=0, sd=eps_study_tau),
eps_age = rnorm(n=1, mean=0, sd=eps_study_age),
S = k)
n <- n_study[k]
#simulate data
dat <- MASS::mvrnorm(n=n, mu=mu, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n, mean=0, sd=.05),
W = rbinom(n=n, size=1, prob=.5),
eps_m = rnorm(n=1, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=1, mean=0, sd=eps_study_tau),
eps_age = rnorm(n=1, mean=0, sd=eps_study_age),
S = k)
head(dat)
for (k in 1:K) {
n <- n_study[k]
#sample
dat <- sample_dist(K, k, n, Sigma, eps_study_m, eps_study_tau, eps_study_age, distribution)
train_dat <- bind_rows(train_dat, dat)
}
View(train_dat)
target_dat <- train_dat[sample(nrow(train_dat), n_target),] %>%
dplyr::select(-S, -eps_m, -eps_tau, -eps_age)
#add error terms to target sample
target_dat <- target_dat %>%
mutate(eps_m = rnorm(n=n_target, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=n_target, mean=0, sd=eps_study_tau),
eps_age = rnorm(n=n_target, mean=0, sd=eps_study_age))
View(target_dat)
#m and tau
train_dat <- train_dat %>%
mutate(m = (-1.26 + eps_m) - 0.015*age - 0.49*madrs - 0.093*sex,
tau = (-0.596 + eps_tau) + (0.068 + eps_age)*age)
eps_study_age=0.05
eps_study_tau=0.05
## Simulate training and target (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, n_target, eps_study_m, eps_study_tau,
eps_study_age, distribution, target_dist)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
summary(train_dat$tau)
train_dat$age <- (train_dat$age - mean(train_dat$age ))/sd(train_dat$age )
#m and tau
train_dat <- train_dat %>%
mutate(m = (-1.26 + eps_m) - 0.015*age - 0.49*madrs - 0.093*sex,
tau = (-0.596 + eps_tau) + (0.068 + eps_age)*age)
#training data
train_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
#define covariance matrix
Sigma <- data.frame(age=c(165.6471, 0.2448, -0.5180, 1.6408, -0.9666),
sex=c(0.2448, 0.2183, -0.0218, -1.9030, 0.1380),
smstat=c(-0.5180, -0.0218, 0.2118, -0.1429, 0.1155),
weight=c(1.6408, -1.9030, -0.1428, 452.6100, -7.6864),
madrs=c(-0.9666, 0.1380, 0.1155, -7.6864, 17.5343),
row.names=c("age","sex","smstat","weight","madrs"))
for (k in 1:K) {
n <- n_study[k]
#sample
dat <- sample_dist(K, k, n, Sigma, eps_study_m, eps_study_tau, eps_study_age, distribution)
train_dat <- bind_rows(train_dat, dat)
}
train_dat$age <- (train_dat$age - mean(train_dat$age ))/sd(train_dat$age )
#m and tau
train_dat <- train_dat %>%
mutate(m = (-1.26 + eps_m) - 0.015*age - 0.49*madrs - 0.093*sex,
tau = (-0.596 + eps_tau) + (0.068 + eps_age)*age)
#training data
train_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
#define covariance matrix
Sigma <- data.frame(age=c(165.6471, 0.2448, -0.5180, 1.6408, -0.9666),
sex=c(0.2448, 0.2183, -0.0218, -1.9030, 0.1380),
smstat=c(-0.5180, -0.0218, 0.2118, -0.1429, 0.1155),
weight=c(1.6408, -1.9030, -0.1428, 452.6100, -7.6864),
madrs=c(-0.9666, 0.1380, 0.1155, -7.6864, 17.5343),
row.names=c("age","sex","smstat","weight","madrs"))
for (k in 1:K) {
n <- n_study[k]
#sample
dat <- sample_dist(K, k, n, Sigma, eps_study_m, eps_study_tau, eps_study_age, distribution)
train_dat <- bind_rows(train_dat, dat)
}
#target data
if (target_dist == "same") {
target_dat <- train_dat[sample(nrow(train_dat), n_target),] %>%
dplyr::select(-S, -eps_m, -eps_tau, -eps_age)
} else if (target_dist == "upweight") {
train_weight <- train_dat %>%
mutate(study_weight = ifelse(S %in% c(3, 5), 3, 1))
target_dat <- train_weight[sample(nrow(train_weight), n_target, prob=train_weight$study_weight),] %>%
dplyr::select(-study_weight, -S, -eps_m, -eps_tau, -eps_age)
} else if (target_dist == "different") {
target_mean <- c(age=30, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=25)
target_dat <- MASS::mvrnorm(n=n_target, mu=target_mean, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n_target, mean=0, sd=.05),
W = rbinom(n=n_target, size=1, prob=.5))
}
#add error terms to target sample
target_dat <- target_dat %>%
mutate(eps_m = rnorm(n=n_target, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=n_target, mean=0, sd=eps_study_tau),
eps_age = rnorm(n=n_target, mean=0, sd=eps_study_age))
#standardize age and madrs
#add m and tau
train_dat <- train_dat %>%
mutate(age = (age - mean(age))/sd(age),
madrs = (mards - mean(madrs))/sd(madrs),
m = (-17.40 + eps_m) - 0.13*age - 2.05*madrs - 0.11*sex,
tau = (2.505 + eps_tau) + (0.82 + eps_age)*age)
#standardize age and madrs
#add m and tau
train_dat <- train_dat %>%
mutate(age = (age - mean(age))/sd(age),
madrs = (madrs - mean(madrs))/sd(madrs),
m = (-17.40 + eps_m) - 0.13*age - 2.05*madrs - 0.11*sex,
tau = (2.505 + eps_tau) + (0.82 + eps_age)*age)
target_dat <- target_dat %>%
mutate(age = (age - mean(age))/sd(age),
madrs = (madrs - mean(madrs))/sd(madrs),
m = (-17.40 + eps_m) - 0.13*age - 2.05*madrs - 0.11*sex,
tau = (2.505 + eps_tau) + (0.82 + eps_age)*age)
summary(train_dat$tau)
summary(target_dat$tau)
eps_study_tau
eps_study_tau=eps_study_age=eps_study_m=1
#training data
train_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
#define covariance matrix
Sigma <- data.frame(age=c(165.6471, 0.2448, -0.5180, 1.6408, -0.9666),
sex=c(0.2448, 0.2183, -0.0218, -1.9030, 0.1380),
smstat=c(-0.5180, -0.0218, 0.2118, -0.1429, 0.1155),
weight=c(1.6408, -1.9030, -0.1428, 452.6100, -7.6864),
madrs=c(-0.9666, 0.1380, 0.1155, -7.6864, 17.5343),
row.names=c("age","sex","smstat","weight","madrs"))
for (k in 1:K) {
n <- n_study[k]
#sample
dat <- sample_dist(K, k, n, Sigma, eps_study_m, eps_study_tau, eps_study_age, distribution)
train_dat <- bind_rows(train_dat, dat)
}
#target data
if (target_dist == "same") {
target_dat <- train_dat[sample(nrow(train_dat), n_target),] %>%
dplyr::select(-S, -eps_m, -eps_tau, -eps_age)
} else if (target_dist == "upweight") {
train_weight <- train_dat %>%
mutate(study_weight = ifelse(S %in% c(3, 5), 3, 1))
target_dat <- train_weight[sample(nrow(train_weight), n_target, prob=train_weight$study_weight),] %>%
dplyr::select(-study_weight, -S, -eps_m, -eps_tau, -eps_age)
} else if (target_dist == "different") {
target_mean <- c(age=30, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=25)
target_dat <- MASS::mvrnorm(n=n_target, mu=target_mean, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n_target, mean=0, sd=.05),
W = rbinom(n=n_target, size=1, prob=.5))
}
#add error terms to target sample
target_dat <- target_dat %>%
mutate(eps_m = rnorm(n=n_target, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=n_target, mean=0, sd=eps_study_tau),
eps_age = rnorm(n=n_target, mean=0, sd=eps_study_age))
#standardize age and madrs
#add m and tau
train_dat <- train_dat %>%
mutate(age = (age - mean(age))/sd(age),
madrs = (madrs - mean(madrs))/sd(madrs),
m = (-17.40 + eps_m) - 0.13*age - 2.05*madrs - 0.11*sex,
tau = (2.505 + eps_tau) + (0.82 + eps_age)*age)
target_dat <- target_dat %>%
mutate(age = (age - mean(age))/sd(age),
madrs = (madrs - mean(madrs))/sd(madrs),
m = (-17.40 + eps_m) - 0.13*age - 2.05*madrs - 0.11*sex,
tau = (2.505 + eps_tau) + (0.82 + eps_age)*age)
summary(train_dat$tau)
summary(test_dat$tau)
summary(target_dat$tau)
source("R/MDD_Generation_OOSEst.R")
## Simulate training and target (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, n_target, eps_study_m, eps_study_tau,
eps_study_age, distribution, target_dist)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
summary(train_dat$tau)
summary(target_dat$tau)
sim_dat <- gen_mdd(K, n_mean, n_sd, n_target, eps_study_m, eps_study_tau,
eps_study_age, distribution, target_dist)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
summary(train_dat$tau)
summary(target_dat$tau)
sim_dat <- gen_mdd(K, n_mean, n_sd, n_target, eps_study_m, eps_study_tau,
eps_study_age, distribution, target_dist)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
summary(target_dat$tau)
summary(train_dat$tau)
## Fit mixed effects models
#correct
mod <- lmer(Y ~  madrs + sex + W*age +
(W + W:age | S), data=train_dat,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=10000)))
sum <- summary(mod)
sm
sum
#incorrect
mod_wrong <- lmer(Y ~  madrs + sex + W*age +
(W | S), data=train_dat,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=10000)))
sum_wrong <- summary(mod_wrong)
#manual PI
manual_train <- manual_pi(train_dat, mod, K, rand_int=T)
manual_target <- manual_pi(target_dat, mod, K, rand_int=T)
manual_res <- assess_interval(manual_train, manual_target)
manual_res
manual_target <- manual_pi(target_dat, mod, K, rand_int=T)
View(filter(all_long, eps_study_m==1, eps_study_tau==1, eps_study_age==1, distribution=="same", target_dist=="same"))
View(filter(all, eps_study_m==1, eps_study_tau==1, eps_study_age==1, distribution=="same", target_dist=="same"))
x <- (filter(all, eps_study_m==1, eps_study_tau==1, eps_study_age==1, distribution=="same", target_dist=="same"))
x %>% filter(Metric=="train_mse") %>% ggplot(aes(x=Mean)) + geom_histogram()
x %>% filter(Metric=="train_mse") %>% ggplot(aes(x=manual_res)) + geom_histogram()
x %>% filter(Metric=="target_ms") %>% ggplot(aes(x=manual_res)) + geom_histogram()
x %>% filter(Metric=="target_mse") %>% ggplot(aes(x=manual_res)) + geom_histogram()
eps_study_tau
x %>% filter(Metric=="train_length") %>% ggplot(aes(x=manual_res)) + geom_histogram()
x %>% filter(Metric=="target_length") %>% ggplot(aes(x=manual_res)) + geom_histogram()
## Calculate mean and CIs for individuals and assess accuracy
#confidence interval
glht_train <- glht_ci(train_dat, mod)
glht_target <- glht_ci(target_dat, mod)
glht_res <- assess_interval(glht_train, glht_target)
#confidence interval - incorrectly specified
glht_train_wrong <- glht_ci(train_dat, mod_wrong)
glht_target_wrong <- glht_ci(target_dat, mod_wrong)
glht_res_wrong <- assess_interval(glht_train_wrong, glht_target_wrong)
#manual PI
manual_train <- manual_pi(train_dat, mod, K, rand_int=T)
manual_target <- manual_pi(target_dat, mod, K, rand_int=T)
manual_res <- assess_interval(manual_train, manual_target)
#manual PI - incorrectly specified
manual_train_wrong <- manual_pi(train_dat, mod_wrong, K, rand_int=F)
manual_target_wrong <- manual_pi(target_dat, mod_wrong, K, rand_int=F)
manual_res_wrong <- assess_interval(manual_train_wrong, manual_target_wrong)
#bootstrap PI
boot_train <- boot_pi(train_dat, mod, rand_int=T)
boot_target <- boot_pi(target_dat, mod, rand_int=T)
boot_res <- assess_interval(boot_train, boot_target)
#bootstrap PI - incorrectly specified
boot_train_wrong <- boot_pi(train_dat, mod_wrong, rand_int=F)
boot_target_wrong <- boot_pi(target_dat, mod_wrong, rand_int=F)
boot_res_wrong <- assess_interval(boot_train_wrong, boot_target_wrong)
## Save results
#data frame of parameters
params <- data.frame(K=K, n_mean=n_mean, n_sd=n_sd, n_target=n_target, eps_study_m=eps_study_m,
eps_study_tau=eps_study_tau, eps_study_age=eps_study_age,
distribution=distribution, target_dist=target_dist)
#data frame of results
all_res <- cbind(glht_res, glht_res_wrong, manual_res,
manual_res_wrong, boot_res, boot_res_wrong) %>%
data.frame() %>%
rownames_to_column("Metric") %>%
cbind(params)
View(all_res)
library(tidyverse)
library(lme4)
library(rsample)
library(multcomp)
library(MASS)
source("R/MDD_Generation_OOSEst.R")
source("R/MA_OOSEst.R")
# set up parameters
K <- 10
n_mean <- 200
n_sd <- 0
n_target <- 100
settings <- expand.grid(eps_study_m = c(0.05, 1),
eps_combo = c("0.05 0", "0.5 0.05", "0.5 0.5",
"1 0.05", "1 0.5", "1 1"),
distribution = c("same", "varying_madrs", "halfdiff_madrsage", "separate_age"),
target_dist = c("same", "different"),
iteration = c(1:100)) %>%
separate(eps_combo, into=c("eps_study_tau", "eps_study_age"), sep=" ") %>%
mutate(eps_study_tau = as.numeric(eps_study_tau),
eps_study_age = as.numeric(eps_study_age))
settings
i=12
eps_study_m <- settings$eps_study_m[i]
eps_study_tau <- settings$eps_study_tau[i]
eps_study_age <- settings$eps_study_age[i]
distribution <- settings$distribution[i]
target_dist <- settings$target_dist[i]
iteration <- settings$iteration[i]
seed <- i
#now code
set.seed(seed)
results <- compare_oos(K=K, n_mean=n_mean, n_sd=n_sd, n_target=n_target, eps_study_m=eps_study_m,
eps_study_tau=eps_study_tau, eps_study_age=eps_study_age,
distribution=distribution, target_dist=target_dist)
results
settings <- expand.grid(eps_study_m = c(0.05, 1),
eps_combo = c("0.05 0", "0.5 0.05", "0.5 0.5",
"1 0.05", "1 0.5", "1 1"),
distribution = c("same", "varying_madrs", "halfdiff_madrsage", "separate_age"),
target_dist = c("same", "different"),
iteration = c(1:100)) %>%
separate(eps_combo, into=c("eps_study_tau", "eps_study_age"), sep=" ") %>%
mutate(eps_study_tau = as.numeric(eps_study_tau),
eps_study_age = as.numeric(eps_study_age))
nrow(settings)
