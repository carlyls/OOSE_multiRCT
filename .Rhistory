summary(mod_avg)
fixef(mod_avg)
fixef(mod_avg)$W
summary(mod_avg)["W"]
fixef(mod_avg)["W"]
#prediction interval for treatment effect
mu <- fixef(mod_avg)["W"]
coef(mod_avg)
summary(mod_avg)$coef[, 2, drop = FALSE]
summary(mod_avg)$coef
mu
summary(mod_avg)$coef[, 2]
se <- summary(mod_avg)$coef[,2]["W"]
se
a <- summary(mod_avg)
a$sigma
a
ranef(a)
ranef(mod_avg)
ranef(mod_avg)$S$W
ranef(mod_avg)$S$W %>% var()
a
getME(mod_avg, "Z")
getME(mod_avg, "theta")
mu
tau <- 1.004e-05
tau
pred_lower <- mu - qt(.025, 4)*sqrt(tau2+se^2)
tau2 <- 1.004e-05 #how do I pull this out with code?
pred_lower <- mu - qt(.025, 4)*sqrt(tau2+se^2)
pred_lower
mu
pred_lower <- mu + qt(.025, 4)*sqrt(tau2+se^2)
pred_upper <- mu - qt(.025, 4)*sqrt(tau2+se^2)
print(paste0("(",pred_lower,", "pred_upper,")"))
print(paste0("(",pred_lower,", ",pred_upper,")"))
pred_lower <- round(mu + qt(.025, 4)*sqrt(tau2+se^2),2)
pred_upper <- round(mu - qt(.025, 4)*sqrt(tau2+se^2),2)
print(paste0("(",pred_lower,", ",pred_upper,")"))
head(train)
head(train_dat)
mean(train_dat$tau)
#add in heterogeneity in fixed effects
mod_het <- lmer(Y ~ W + sex + age + madrs + W:age + W:madrs +
(1 + W | S), data=train_dat)
summary(mod_het)
#add in heterogeneity in fixed and random effects
mod_ranhet <- lmer(Y ~ W + sex + age + madrs + W:age +
(1 + W + W:age | S), data=train_dat)
summary(mod_ranhet)
library(tidyverse)
library(rsample)
library(grf)
library(fastDummies)
library(nnet)
library(lme4)
source("MDD_Simulation_OOSEst.R")
#simulate data
sim_dat <- gen_mdd(K=6, n_mean=200, n_sd=0, eps_study_m=0.05, eps_study_tau=0.01,
distribution="same", target_dist="same")
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
covars <- c("sex", "smstat", "weight", "age", "madrs")
#fit typical model (no heterogeneity)
mod_avg <- lmer(Y ~ W + sex + age + madrs +
(1 + W | S), data=train_dat)
summary(mod_avg)
install.packages("pimeta")
library(pimeta)
?pima
fixef(mod_avg)
coef(mod_avg)
confint(mod_avg)
ranef(mod_avg)
vcov(mod_avg)
#prediction interval for treatment effect
mu <- fixef(mod_avg)["W"]
summary(mod_avg)
ranef(mod_avg)
var(ranef(mod_avg))
tau2 <- 1.004e-05 #how do I pull this out with code?
pred_lower <- round(mu + qt(.025, 4)*sqrt(tau2+se^2),2)
pred_upper <- round(mu - qt(.025, 4)*sqrt(tau2+se^2),2)
print(paste0("(",pred_lower,", ",pred_upper,")"))
#prediction interval for treatment effect
mu <- fixef(mod_avg)["W"]
se <- summary(mod_avg)$coef[,2]["W"]
tau2 <- 1.004e-05 #how do I pull this out with code?
pred_lower <- round(mu + qt(.025, 4)*sqrt(tau2+se^2),2)
pred_upper <- round(mu - qt(.025, 4)*sqrt(tau2+se^2),2)
print(paste0("(",pred_lower,", ",pred_upper,")"))
confint(fixef(mod_avg))
confint(mod_avg)
install.packages("metafor")
?metafor::rma
Zi <- cbind(rep(1,8), seq(1:8))
Zi
G <- matrix(c(392.129,0,0,8.938),2,2)
sigmasq.e <- 26.981
Vi <- Zi%*%G%*%t(Zi) + sigmasq.e * diag(8)
Vi
G
diag(8)
?sweep
library(tidyverse)
library(rsample)
library(grf)
library(fastDummies)
library(nnet)
library(lme4)
library(pimeta)
source("MDD_Simulation_OOSEst.R")
source("R/MDD_Simulation_OOSEst.R")
#simulate data
sim_dat <- gen_mdd(K=6, n_mean=200, n_sd=0, eps_study_m=0.05, eps_study_tau=0.01,
distribution="same", target_dist="same")
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
covars <- c("sex", "smstat", "weight", "age", "madrs")
#add in heterogeneity in fixed and random effects
mod_ranhet <- lmer(Y ~ W + age + W:age +
(W + W:age | S), data=train_dat)
#add in heterogeneity in fixed and random effects
mod_ranhet <- lmer(Y ~ W + age + W:age +
(W + age + W:age | S), data=train_dat)
summary(mod_ranhet)
#simulate data
sim_dat <- gen_mdd(K=6, n_mean=200, n_sd=0, eps_study_m=1, eps_study_tau=0.05,
distribution="same", target_dist="same")
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
covars <- c("sex", "smstat", "weight", "age", "madrs")
#fit typical model (no heterogeneity)
mod_avg <- lmer(Y ~ W + sex + age + madrs +
(1 + W | S), data=train_dat)
summary(mod_avg)
#prediction interval for treatment effect
mu <- fixef(mod_avg)["W"]
se <- summary(mod_avg)$coef[,2]["W"]
tau2 <- 1.004e-05 #how do I pull this out with code?
pred_lower <- round(mu + qt(.025, 4)*sqrt(tau2+se^2),2)
pred_upper <- round(mu - qt(.025, 4)*sqrt(tau2+se^2),2)
print(paste0("(",pred_lower,", ",pred_upper,")"))
#add in heterogeneity in fixed effects
mod_het <- lmer(Y ~ W + sex + age + madrs + W:age + W:madrs +
(1 + W | S), data=train_dat)
summary(mod_het)
#add in heterogeneity in fixed and random effects
mod_ranhet <- lmer(Y ~ W + age + W:age +
(W + age + W:age | S), data=train_dat)
summary(mod_ranhet)
#explore var/covar
coef(summary(mod_ranhet))
vcov(mod_ranhet)
vcov(mod_ranhet) %>% sqrt()
vcov(mod_ranhet)
VarCorr(mod_ranhet)
print(VarCorr(mod_ranhet))
print(VarCorr(mod_ranhet, comp=c("Variance","Std.Dev")))
print(VarCorr(mod_ranhet, comp=c("Variance","Std.Dev.")))
print(VarCorr(mod_ranhet), comp=c("Variance","Std.Dev."))
print(vc <- VarCorr(mod_ranhet), comp=c("Variance","Std.Dev."))
sigma(mod_ranhet)
print(VarCorr(mod_ranhet, comp=c("Variance","Std.Dev"))) #random effects
as.data.frame(VarCorr(mod_ranhet))
print(VarCorr(mod_ranhet), comp=c("Variance","Std.Dev")) #random effects
-0.786*sqrt(57.264434)*sqrt(3.080994)
profile(mod_ranhet)
predict(mod_ranhet)
ranef(mod_ranhet)
confint(mod_ranhet)
vcov(mod_ranhet) #covariance matrix of fixed effects
#variance of CATE calculation by hand
vartheta <- vcov(mod_ranhet)["W","W"]
vartheta
fc <- vcov(mod_ranhet) #covariance matrix of fixed effects
rc <- as.data.frame(VarCorr(mod_ranhet)) #variance and covariances of random effects
rc
which(rc$var1=="S")
vartheta <- fc["W","W"] + x^2*fc["W:age","W:age"] +
2*x*fc["W","W:age"] + rc[which(rc$var1==""W)]
which(rc$var1==""W)
which(rc$var1=="W")
rc
which(rc$var1=="W" & is.na(rc$var2)==T)
vartheta <- fc["W","W"] + x^2*fc["W:age","W:age"] +
2*x*fc["W","W:age"] + rc[which(rc$var1=="W" & is.na(rc$var2)==T),"vcov"] +
x^2*rc[which(rc$var1=="W:age" & is.na(rc$var2)==T),"vcov"] +
2*x*rc[which(rc$var1=="W" & rc$var2=="W:age"),"vcov"]
#variance of CATE calculation by hand
#let age be 40 years old
x <- 40
vartheta <- fc["W","W"] + x^2*fc["W:age","W:age"] +
2*x*fc["W","W:age"] + rc[which(rc$var1=="W" & is.na(rc$var2)==T),"vcov"] +
x^2*rc[which(rc$var1=="W:age" & is.na(rc$var2)==T),"vcov"] +
2*x*rc[which(rc$var1=="W" & rc$var2=="W:age"),"vcov"]
vartheta
colmeans(ranef(mod_ranhet))
colMeans(ranef(mod_ranhet))
ranef(mod_ranhet)
ranef(mod_ranhet)$s
ranef(mod_ranhet)$S
ranef(mod_ranhet)$S %>% colMeans()
coef(mod_ranhet)
fixeef(mod_ranhet)
fixef(mod_ranhet)
meantheta <- fixef(mod_ranhet)["W"] + fixef(mod_ranhet)["W:age"]*x
meantheta
pred_lower <- round(meantheta + qt(.025, 4)*sqrt(vartheta),2)
pred_upper <- round(meantheta - qt(.025, 4)*sqrt(vartheta),2)
print(paste0("(",pred_lower,", ",pred_upper,")"))
qt(.025, 4)
??glht
library(tidyverse)
library(rsample)
library(grf)
library(fastDummies)
library(nnet)
library(lme4)
library(pimeta)
source("R/MDD_Simulation_OOSEst.R")
#simulate data ####
sim_dat <- gen_mdd(K=6, n_mean=200, n_sd=0, eps_study_m=1, eps_study_tau=0.05,
distribution="same", target_dist="same")
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
covars <- c("sex", "smstat", "weight", "age", "madrs")
#add in heterogeneity in fixed and random effects ####
mod_ranhet <- lmer(Y ~ W + age + W:age +
(W + age + W:age | S), data=train_dat)
summary(mod_ranhet)
#explore var/covar
coef(summary(mod_ranhet)) #fixed effects and SEs
fc <- vcov(mod_ranhet) #covariance matrix of fixed effects
fc
print(VarCorr(mod_ranhet), comp=c("Variance","Std.Dev")) #random effects
rc <- as.data.frame(VarCorr(mod_ranhet)) #variance and covariances of random effects
sigma(mod_ranhet) #residual sd
rc
#variance of CATE calculation by hand
#let age be 40 years old
x <- 40
meantheta <- fixef(mod_ranhet)["W"] + fixef(mod_ranhet)["W:age"]*x
vartheta <- fc["W","W"] + x^2*fc["W:age","W:age"] +
2*x*fc["W","W:age"] + rc[which(rc$var1=="W" & is.na(rc$var2)==T),"vcov"] +
x^2*rc[which(rc$var1=="W:age" & is.na(rc$var2)==T),"vcov"] +
2*x*rc[which(rc$var1=="W" & rc$var2=="W:age"),"vcov"]
#prediction interval
pred_lower <- round(meantheta + qt(.025, 4)*sqrt(vartheta),2)
pred_upper <- round(meantheta - qt(.025, 4)*sqrt(vartheta),2)
print(paste0("(",pred_lower,", ",pred_upper,")"))
library(multcomp)
#prediction interval by glht
glht(mod_ranhet, linfct="W = 0")
#prediction interval by glht
summary(glht(mod_ranhet, linfct="W = 0"))
#prediction interval by glht
confint(glht(mod_ranhet, linfct="W = 0"))
#prediction interval by glht
confint(glht(mod_ranhet, linfct="W + W:age = 0"))
#prediction interval by glht
confint(glht(mod_ranhet, linfct="W + 40*W:age = 0"))
meantheta
pred_lower
#prediction interval by glht
confint(glht(mod_ranhet, linfct="W + 50*W:age = 0"))
#prediction interval by glht
pi <- glht(mod_ranhet, linfct="W + 40*W:age = 0")
confint(pi)
pi$model
pi$linfct
pi$rhs
pi$coef
pi$vcov
vcov(mod_ranhet)
pi$df
pi$type
pi$alternative
confint(pi)
0.316449990 + 40^2*1.314903e-04 + 2*40*-3.966176e-03
0.5800 + 1.96*sqrt(0.2095404)
print(paste0("(",pred_lower,", ",pred_upper,")"))
vartheta <- fc["W","W"] + x^2*fc["W:age","W:age"] +
2*x*fc["W","W:age"] + rc[which(rc$var1=="W" & is.na(rc$var2)==T),"vcov"] +
rc[which(rc$var1=="W:age" & is.na(rc$var2)==T),"vcov"] +
2*rc[which(rc$var1=="W" & rc$var2=="W:age"),"vcov"]
#prediction interval
pred_lower <- round(meantheta + qt(.025, 4)*sqrt(vartheta),2)
pred_upper <- round(meantheta - qt(.025, 4)*sqrt(vartheta),2)
print(paste0("(",pred_lower,", ",pred_upper,")"))
??predictInterval
?merTools::predictInterval
install.packages("merTools")
library(merTools)
predictInterval()
?predictInterval
?marginaleffects::avg_comparisons
?marginaleffects::avcomparisons
?marginaleffects::comparisons
library(marginaleffects)
#prediction interval by marginaleffects
comparisons(mod_ranhet)
#prediction interval by marginaleffects
comparisons(mod_ranhet,
variables = c("W", "W:age"),
vcov = vcov(mod_ranhet))
#prediction interval by marginaleffects
comparisons(mod_ranhet,
variables = c("W", "age"),
vcov = vcov(mod_ranhet))
#prediction interval by marginaleffects
comparisons(mod_ranhet,
variables = c("W"))
#prediction interval by marginaleffects
comparisons(mod_ranhet,
variables = c("W"),
newdata = train_dat[1,])
#prediction interval by marginaleffects
comparisons(mod_ranhet,
variables = c("W","W:age"),
newdata = train_dat[1,])
#prediction interval by marginaleffects
comparisons(mod_ranhet,
variables = c("W","age"),
newdata = train_dat[1,])
comparisons(mod_ranhet)$term
comparisons(mod_ranhet)$term %>% unique()
#prediction interval by marginaleffects
comparisons(mod_ranhet,
variables = c("W+W:age"),
newdata = train_dat[1,])
#prediction interval by marginaleffects
comparisons(mod_ranhet,
variables = c("W"),
newdata = train_dat[1,])
predict(mod_ranhet)
?predict.merMod
#simulate data ####
sim_dat <- gen_mdd(K=6, n_mean=200, n_sd=0, eps_study_m=1, eps_study_tau=0.05,
distribution="same", target_dist="same")
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
covars <- c("sex", "smstat", "weight", "age", "madrs")
#simulate data ####
sim_dat <- gen_mdd(K=6, n_mean=200, n_sd=0, eps_study_m=1, eps_study_tau=0.05,
distribution="same", target_dist="same")
train_dat
covars <- c("sex", "smstat", "weight", "age", "madrs")
#add in heterogeneity in fixed and random effects ####
mod_ranhet <- lmer(Y ~ W + age + W:age +
(W + age + W:age | S), data=train_dat)
summary(mod_ranhet)
#prediction interval by glht
pi <- glht(mod_ranhet, linfct="W + 40*W:age = 0")
confint(pi) #looks like this just does a confidence interval using the variance of the fixed effects
library(tidyverse)
library(rsample)
library(grf)
library(fastDummies)
library(nnet)
library(lme4)
library(pimeta)
library(multcomp)
library(merTools)
library(marginaleffects)
source("R/MDD_Generation_OOSEst.R")
#simulate data ####
sim_dat <- gen_mdd(K=6, n_mean=200, n_sd=0, eps_study_m=1, eps_study_tau=0.05,
distribution="same", target_dist="same")
#simulate data ####
sim_dat <- gen_mdd(K=6, n_mean=200, n_sd=0, eps_study_m=1, eps_study_tau=0.05,
distribution="same", target_dist="same")
#training data
train_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
#define covariance matrix
Sigma <- data.frame(age=c(165.6471, 0.2448, -0.5180, 1.6408, -0.9666),
sex=c(0.2448, 0.2183, -0.0218, -1.9030, 0.1380),
smstat=c(-0.5180, -0.0218, 0.2118, -0.1429, 0.1155),
weight=c(1.6408, -1.9030, -0.1428, 452.6100, -7.6864),
madrs=c(-0.9666, 0.1380, 0.1155, -7.6864, 17.5343),
row.names=c("age","sex","smstat","weight","madrs"))
for (k in 1:K) {
n <- n_study[k]
#sample
dat <- sample_dist(k, n, Sigma, eps_study_m, eps_study_tau, distribution)
train_dat <- bind_rows(train_dat, dat)
}
K=6
n_mean=200
n_sd=0
eps_study_m=0.05
eps_study_tau=0.01
distribution="same"
target_dist="same"
for (k in 1:K) {
n <- n_study[k]
#sample
dat <- sample_dist(k, n, Sigma, eps_study_m, eps_study_tau, distribution)
train_dat <- bind_rows(train_dat, dat)
}
#training data
train_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
#define covariance matrix
Sigma <- data.frame(age=c(165.6471, 0.2448, -0.5180, 1.6408, -0.9666),
sex=c(0.2448, 0.2183, -0.0218, -1.9030, 0.1380),
smstat=c(-0.5180, -0.0218, 0.2118, -0.1429, 0.1155),
weight=c(1.6408, -1.9030, -0.1428, 452.6100, -7.6864),
madrs=c(-0.9666, 0.1380, 0.1155, -7.6864, 17.5343),
row.names=c("age","sex","smstat","weight","madrs"))
for (k in 1:K) {
n <- n_study[k]
#sample
dat <- sample_dist(k, n, Sigma, eps_study_m, eps_study_tau, distribution)
train_dat <- bind_rows(train_dat, dat)
}
#target data
if (target_dist == "same") {
target_dat <- train_dat[sample(nrow(train_dat), 100),] %>%
dplyr::select(-S, -eps_m, -eps_tau)
} else if (target_dist == "upweight") {
train_weight <- train_dat %>%
mutate(study_weight = ifelse(S %in% c(3, 5), 3, 1))
target_dat <- train_weight[sample(nrow(train_weight), 100, prob=train_weight$study_weight),] %>%
dplyr::select(-study_weight, -S, -eps_m, -eps_tau)
} else if (target_dist == "different") {
target_mean <- c(age=30, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=25)
target_dat <- MASS::mvrnorm(n=100, mu=target_mean, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=100, mean=0, sd=.05),
W = rbinom(n=100, size=1, prob=.5))
}
#m and tau
train_dat <- train_dat %>%
mutate(m = -0.02*age - 0.7*madrs - 0.15*sex + eps_m,
tau = -8.5 + 0.07*age + 0.20*madrs + eps_tau)
target_dat <- target_dat %>%
mutate(m = -0.02*age - 0.7*madrs - 0.15*sex,
tau = -8.5 + 0.07*age + 0.20*madrs)
#outcome Y
train_dat <- train_dat %>%
mutate(Y = m + W*tau + eps,
S = factor(S)) %>%
dplyr::select(S, W, sex, smstat, weight, age, madrs, Y, tau)
target_dat <- target_dat %>%
mutate(Y = m + W*tau + eps) %>%
dplyr::select(W, sex, smstat, weight, age, madrs, Y, tau)
#source("Comparing_methods_functions.R")
source("R/MDD_Generation_OOSEst.R")
## Simulate training and target (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, eps_study_m, eps_study_tau, distribution, target_dist)
#simulate data ####
sim_dat <- gen_mdd(K=6, n_mean=200, n_sd=0, eps_study_m=1, eps_study_tau=0.05,
distribution="same", target_dist="same")
#simulate data ####
sim_dat <- gen_mdd(K=6, n_mean=200, n_sd=0, eps_study_m=1, eps_study_tau=0.05,
distribution="same", target_dist="same")
source("R/MDD_Generation_OOSEst.R")
#simulate data ####
sim_dat <- gen_mdd(K=6, n_mean=200, n_sd=0, eps_study_m=1, eps_study_tau=0.05,
distribution="same", target_dist="same")
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
head(train_dat)
head(target_dat)
covars <- c("sex", "smstat", "weight", "age", "madrs")
#add in heterogeneity in fixed and random effects ####
mod_ranhet <- lmer(Y ~ W + age + W:age +
(W + age + W:age | S), data=train_dat)
summary(mod_ranhet)
sum <- summary(mod_ranhet)
predict(mod_ranhet)
#add in heterogeneity in fixed and random effects ####
mod <- lmer(Y ~ W + age + W:age +
(W + age + W:age | S), data=train_dat)
sum <- summary(mod)
age <- train_dat$age[i]
train_dat$age[1]
train_dat$age[2]
age <- train_dat$age[i] %>% as.character()
i=1
age <- train_dat$age[i] %>% as.character()
age
ci <- glht(mod, linfct=paste0("W + ",age,"*W:age = 0"))
ci
confint(ci)
confint(ci)$Estimate
confint(ci) %>% data.frame()
confint(ci) %>% as.data.frame()
?glht
coef(ci)
print(ci)
confint(ci)
vcov(ci)
0.7753 + 1.96*0.03437815
0.7753 + 1.96*sqrt(0.03437815)
0.7753 - 1.96*sqrt(0.03437815)
coef(ci)
coef(ci) + 1.96*sqrt(vcov(ci)[1,1])
coef(ci) - 1.96*sqrt(vcov(ci)[1,1])
confint(ci)
vcov(ci)[1,1]
mean <- coef(ci)
mean
sd <- sqrt(vcov(ci)[1,1])
sd
mean+1.96*se
mean+1.96*sd
?map_dfr
