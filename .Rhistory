X <- df %>%
mutate(trt = 1) %>%
dplyr::select(trt, age) %>%
as.matrix() #X
X
mean_theta <- X %*% beta %>% c() #theta-hat
mean_theta
if (rand_int == T) { Z <- X } else { Z <- X[,1] }
rand_int=T
if (rand_int == T) { Z <- X } else { Z <- X[,1] }
Z
vcov_theta <- X %*% var_beta %*% t(X) + Z %*% var_rand %*% t(Z)
vcov_theta
var_theta <- diag(vcov_theta) #Var(theta-hat)
var_theta
#prediction interval
pred_lower <- mean_theta + qt(.025, K-2)*sqrt(var_theta)
pred_upper <- mean_theta - qt(.025, K-2)*sqrt(var_theta)
rand_int=F
#get variances
res <- matrix_var(mod, rand_int)
res
#get variances
res <- matrix_var(mod_wrong, rand_int)
res
beta <- res$beta
var_beta <- res$var_beta
var_rand <- res$var_rand
fc <- vcov(mod_wrong) #covariance matrix of fixed effects
rc <- as.data.frame(VarCorr(mod_wrong))
rc
beta <- res$beta
var_beta <- res$var_beta
var_rand <- res$var_rand
#calculate theta-hats
X <- df %>%
mutate(trt = 1) %>%
dplyr::select(trt, age) %>%
as.matrix() #X
X
if (rand_int == T) { Z <- X } else { Z <- X[,1] }
Z
mean_theta <- X %*% beta %>% c() #theta-hat
vcov_theta <- X %*% var_beta %*% t(X) + Z %*% var_rand %*% t(Z)
var_theta <- diag(vcov_theta) #Var(theta-hat)
var_theta
mean_theta
#manual PI
manual_train <- manual_pi(train_dat, mod, K, rand_int=T)
#add pis to dataset
manual_pi <- function(df, mod, K, rand_int=T) {
#get variances
res <- matrix_var(mod, rand_int)
beta <- res$beta
var_beta <- res$var_beta
var_rand <- res$var_rand
#calculate theta-hats
X <- df %>%
mutate(trt = 1) %>%
dplyr::select(trt, age) %>%
as.matrix() #X
if (rand_int == T) { Z <- X } else { Z <- X[,1] }
mean_theta <- X %*% beta %>% c() #theta-hat
vcov_theta <- X %*% var_beta %*% t(X) + Z %*% var_rand %*% t(Z)
var_theta <- diag(vcov_theta) #Var(theta-hat)
#prediction interval
pred_lower <- mean_theta + qt(.025, K-2)*sqrt(var_theta)
pred_upper <- mean_theta - qt(.025, K-2)*sqrt(var_theta)
df <- df %>%
mutate(lower = pred_lower,
mean = mean_theta,
upper = pred_upper)
return(df)
}
#manual PI
manual_train <- manual_pi(train_dat, mod, K, rand_int=T)
head(manual_train)
res <- matrix_var(mod, rand_int=T)
res
#randomly sample fixed and random coefficients
boot_fix <- mvrnorm(n=1000, mu=c(res$beta), Sigma=res$var_beta) %>%
data.frame()
boot_fix
rep(0, nrow(res$var_rand)
)
boot_rand <- mvrnorm(n=1000, mu=rep(0, nrow(res$var_rand)), Sigma=res$var_rand) %>%
data.frame() #assume ranefs have mean 0
head(boot_rand)
x
train_dat$age[1] -> x
x
cates <- (boot_fix$W + boot_rand$W) +
(boot_fix$W.age + boot_rand$W.age)*x
cates
#calculate interval over all iterations
mean <- mean(cates)
sd <- sd(cates)
mean
sd
lower <- mean - 1.96*sd
upper <- mean + 1.96*sd
lower
upper
rand_int=F
#get var-covar of fixed and random effects from model
res <- matrix_var(mod, rand_int)
#randomly sample fixed and random coefficients
boot_fix <- mvrnorm(n=1000, mu=c(res$beta), Sigma=res$var_beta) %>%
data.frame()
boot_rand <- mvrnorm(n=1000, mu=rep(0, nrow(res$var_rand)), Sigma=res$var_rand) %>%
data.frame() #assume ranefs have mean 0
head(boot_fix)
head(boot_rand)
#apply coefficients to estimate cate for all ages
intervals <- map_dfr(.x=df$age, .f=sample_cate,
boot_fix=boot_fix, boot_rand=boot_rand, rand_int=rand_int)
#prediction interval by bootstrap ####
#create intervals from bootstrap
sample_cate <- function(x, boot_fix, boot_rand, rand_int=T) {
#get cate|x according to each coefficient
if (rand_int == T) {
cates <- (boot_fix$W + boot_rand$W) +
(boot_fix$W.age + boot_rand$W.age)*x
} else {
cates <- (boot_fix$W + boot_rand$W) +
(boot_fix$W.age)*x
}
#calculate interval over all iterations
mean <- mean(cates)
sd <- sd(cates)
lower <- mean - 1.96*sd
upper <- mean + 1.96*sd
return(c(lower=lower, mean=mean, upper=upper))
}
#apply coefficients to estimate cate for all ages
intervals <- map_dfr(.x=df$age, .f=sample_cate,
boot_fix=boot_fix, boot_rand=boot_rand, rand_int=rand_int)
interval
intervals
library(tidyverse)
library(rsample)
library(grf)
library(fastDummies)
library(nnet)
source("R/MDD_Generation_OOSEst.R")
source("R/MA_OOSEst.R")
# set up data
N <- 100
K <- 10
n_mean <- 200
n_sd <- 0
eps_target <- 0
settings <- expand.grid(eps_combo = c("0.05 0.05 0.05", "0.05 1 0.05", "0.05 1 1",
"1 1 1", "1 3 1"),
distribution = c("same", "varying_madrs", "halfdiff_madrsage", "separate_age"),
target_dist = c("same", "upweight", "different"),
iteration = c(1:100)) %>%
separate(eps_combo, into=c("eps_study_m", "eps_study_tau", "eps_study_age"), sep=" ") %>%
mutate(eps_study_m = as.numeric(eps_study_m),
eps_study_tau = as.numeric(eps_study_tau),
eps_study_age = as.numeric(eps_study_age))
i=1
eps_study_m <- settings$eps_study_m[i]
eps_study_tau <- settings$eps_study_tau[i]
eps_study_age <- settings$eps_study_age[i]
distribution <- settings$distribution[i]
target_dist <- settings$target_dist[i]
iteration <- settings$iteration[i]
seed <- i
#now code
set.seed(seed)
results <- compare_oos(N=N, K=K, n_mean=n_mean, n_sd=n_sd, eps_study_m=eps_study_m,
eps_study_tau=eps_study_tau, eps_study_age=eps_study_age,
distribution=distribution, target_dist=target_dist, eps_target=eps_target)
results
## Simulate training and target (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, eps_study_m, eps_study_tau,
eps_study_age, distribution, target_dist, eps_target)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
## Fit mixed effects models
#correct
mod <- lmer(Y ~  madrs + sex + W*age +
(W + W:age | S), data=train_dat,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=10000)))
sum <- summary(mod)
#incorrect
mod_wrong <- lmer(Y ~  madrs + sex + W*age +
(W | S), data=train_dat,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=10000)))
sum_wrong <- summary(mod_wrong)
## Calculate mean and CIs for individuals and assess accuracy
#confidence interval
glht_train <- glht_ci(train_dat, mod)
glht_target <- glht_ci(target_dat, mod)
glht_res <- assess_interval(glht_train, glht_target)
#confidence interval - incorrectly specified
glht_train_wrong <- glht_ci(train_dat, mod_wrong)
glht_target_wrong <- glht_ci(target_dat, mod_wrong)
glht_res_wrong <- assess_interval(glht_train_wrong, glht_target_wrong)
#manual PI
manual_train <- manual_pi(train_dat, mod, K, rand_int=T)
manual_target <- manual_pi(target_dat, mod, K, rand_int=T)
manual_res <- assess_interval(manual_train, manual_target)
#manual PI - incorrectly specified
manual_train_wrong <- manual_pi(train_dat, mod_wrong, K, rand_int=F)
manual_target_wrong <- manual_pi(target_dat, mod_wrong, K, rand_int=F)
manual_res_wrong <- assess_interval(manual_train_wrong, manual_target_wrong)
#bootstrap PI
boot_train <- boot_pi(train_dat, mod, rand_int=T)
boot_target <- boot_pi(target_dat, mod, rand_int=T)
boot_res <- assess_interval(boot_train, boot_target)
#bootstrap PI - incorrectly specified
boot_train_wrong <- boot_pi(train_dat, mod_wrong, rand_int=F)
boot_target_wrong <- boot_pi(target_dat, mod_wrong, rand_int=F)
boot_res_wrong <- assess_interval(boot_train_wrong, boot_target_wrong)
glht_res
?bind_rows
#data frames of results
all_res <- bind_rows(glht_res, glht_res_wrong, manual_res, manual_res_wrong,
boot_res, boot_res_wrong)
all_res
View(all_res)
#data frames of results
all_res <- bind_rows(glht_res=glht_res, glht_res_wrong, manual_res, manual_res_wrong,
boot_res, boot_res_wrong)
all_res
#data frames of results
all_res <- bind_rows(glht_res=glht_res, glht_res_wrong=glht_res_wrong, manual_res=manual_res, manual_res_wrong=manual_res_wrong,
boot_res=boot_res, boot_res_wrong=boot_res_wrong)
all_res
#data frames of results
all_res <- bind_rows(glht_res, glht_res_wrong, manual_res, manual_res_wrong,
boot_res, boot_res_wrong, .id="Method")
all_res
#data frames of results
all_res <- bind_rows(glht_res=glht_res, glht_res_wrong=glht_res_wrong, manual_res=manual_res,
manual_res_wrong=manual_res_wrong, boot_res=boot_res, boot_res_wrong=boot_res_wrong,
.id = "Method")
all_res
t(all_res)
bind_cols(glht_res=glht_res, glht_res_wrong=glht_res_wrong,
manual_res=manual_res, manual_res_wrong=manual_res_wrong,
boot_res=boot_res, boot_res_wrong=boot_res_wrong)
?bind_cols
bind_cols(glht_res=glht_res, glht_res_wrong=glht_res_wrong,
manual_res=manual_res, manual_res_wrong=manual_res_wrong,
boot_res=boot_res, boot_res_wrong=boot_res_wrong,
.id = "Method")
all_res$train_mse
#data frame of parameters
params <- data.frame(N=N, K=K, n_mean=n_mean, n_sd=n_sd, eps_study_m=eps_study_m,
eps_study_tau=eps_study_tau, eps_study_age=eps_study_age,
distribution=distribution, target_dist=target_dist, eps_target=eps_target)
params
select(all_res, Method, test_coverage)
select(all_res, Method, target_coverage)
dplyr::select(all_res, Method, target_coverage)
dplyr::select(all_res, Method, target_coverage) %>% t()
rbind(glht_res, glht_res_wrong)
cbind(glht_res, glht_res_wrong)
cbind(glht_res, glht_res_wrong, manual_res)
cbind(glht_res, glht_res_wrong, manual_res)["target_coverage",]
params
cbind(glht_res, glht_res_wrong, manual_res) -> a
a
bind_cols(a, params)
a %>% mutate(params)
cbind(a,params)
cbind(a,params) %>% rownames_to_column()
cbind(a,params) %>% rownames_to_column() -> x
x
dplyr::filter(x, rowname=="target_coverage")
x %>% group_by(rowname, N, K, n_mean, n_sd, eps_study_m, eps_study_tau, eps_study_age, distribution, target_dist, eps_target) %>% summarise(glht_res = mean(glht_res))
x %>% group_by(rowname, N, K, n_mean, n_sd, eps_study_m, eps_study_tau, eps_study_age, distribution, target_dist, eps_target) %>% summarise(glht_res = mean(glht_res)) %>% View()
## Save results
#data frame of results
all_res <- cbind(glht_res, glht_res_wrong,
manual_res, manual_res_wrong,
boot_res, boot_res_wrong)
all_res
res
## Save results
#data frame of results
res <- cbind(glht_res, glht_res_wrong, manual_res,
manual_res_wrong, boot_res, boot_res_wrong)
res
res %>% mutate(N=N)
res %>% rownames_to_column("Metric")
res %>% data.frame()
res
res %>% data.frame() %>% rownames_to_column("Metric")
res %>% data.frame() %>% rownames_to_column("Metric") %>% mutate(N=N)
res %>% data.frame() %>% rownames_to_column("Metric") %>% cbind(params)
res %>% data.frame() %>% rownames_to_column("Metric") %>% mutate(N=N, K=K, n_mean=n_mean, n_sd=n_sd, eps_study_m=eps_study_m,
eps_study_tau=eps_study_tau, eps_study_age=eps_study_age,
distribution=distribution, target_dist=target_dist, eps_target=eps_target)
res %>% data.frame() %>% rownames_to_column("Metric") %>% mutate(N=N, K=K, n_mean=n_mean, n_sd=n_sd, eps_study_m=eps_study_m,
eps_study_tau=eps_study_tau, eps_study_age=eps_study_age,
distribution=distribution, target_dist=target_dist, eps_target=eps_target) -> a
res %>% data.frame() %>% rownames_to_column("Metric") %>% cbind(params) -> b
all.equal(a,b)
## Save results
#data frame of parameters
params <- data.frame(N=N, K=K, n_mean=n_mean, n_sd=n_sd, eps_study_m=eps_study_m,
eps_study_tau=eps_study_tau, eps_study_age=eps_study_age,
distribution=distribution, target_dist=target_dist, eps_target=eps_target)
#data frame of results
res <- cbind(glht_res, glht_res_wrong, manual_res,
manual_res_wrong, boot_res, boot_res_wrong) %>%
data.frame() %>%
rownames_to_column("Metric") %>%
cbind(params)
res
View(res)
glht_res
manual_res_wrong
#overall function ####
compare_oos <- function(N=100, K=6, n_mean=200, n_sd=0, eps_study_m=0.05, eps_study_tau=3,
eps_study_age=0.05, distribution="same", target_dist="same", eps_target=0) {
## Simulate training and target (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, eps_study_m, eps_study_tau,
eps_study_age, distribution, target_dist, eps_target)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
## Fit mixed effects models
#correct
mod <- lmer(Y ~  madrs + sex + W*age +
(W + W:age | S), data=train_dat,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=10000)))
sum <- summary(mod)
#incorrect
mod_wrong <- lmer(Y ~  madrs + sex + W*age +
(W | S), data=train_dat,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=10000)))
sum_wrong <- summary(mod_wrong)
## Calculate mean and CIs for individuals and assess accuracy
#confidence interval
glht_train <- glht_ci(train_dat, mod)
glht_target <- glht_ci(target_dat, mod)
glht_res <- assess_interval(glht_train, glht_target)
#confidence interval - incorrectly specified
glht_train_wrong <- glht_ci(train_dat, mod_wrong)
glht_target_wrong <- glht_ci(target_dat, mod_wrong)
glht_res_wrong <- assess_interval(glht_train_wrong, glht_target_wrong)
#manual PI
manual_train <- manual_pi(train_dat, mod, K, rand_int=T)
manual_target <- manual_pi(target_dat, mod, K, rand_int=T)
manual_res <- assess_interval(manual_train, manual_target)
#manual PI - incorrectly specified
manual_train_wrong <- manual_pi(train_dat, mod_wrong, K, rand_int=F)
manual_target_wrong <- manual_pi(target_dat, mod_wrong, K, rand_int=F)
manual_res_wrong <- assess_interval(manual_train_wrong, manual_target_wrong)
#bootstrap PI
boot_train <- boot_pi(train_dat, mod, rand_int=T)
boot_target <- boot_pi(target_dat, mod, rand_int=T)
boot_res <- assess_interval(boot_train, boot_target)
#bootstrap PI - incorrectly specified
boot_train_wrong <- boot_pi(train_dat, mod_wrong, rand_int=F)
boot_target_wrong <- boot_pi(target_dat, mod_wrong, rand_int=F)
boot_res_wrong <- assess_interval(boot_train_wrong, boot_target_wrong)
## Save results
#data frame of parameters
params <- data.frame(N=N, K=K, n_mean=n_mean, n_sd=n_sd, eps_study_m=eps_study_m,
eps_study_tau=eps_study_tau, eps_study_age=eps_study_age,
distribution=distribution, target_dist=target_dist, eps_target=eps_target)
#data frame of results
all_res <- cbind(glht_res, glht_res_wrong, manual_res,
manual_res_wrong, boot_res, boot_res_wrong) %>%
data.frame() %>%
rownames_to_column("Metric") %>%
cbind(params)
return(all_res)
}
results <- compare_oos(N=N, K=K, n_mean=n_mean, n_sd=n_sd, eps_study_m=eps_study_m,
eps_study_tau=eps_study_tau, eps_study_age=eps_study_age,
distribution=distribution, target_dist=target_dist, eps_target=eps_target)
results
#overall function ####
compare_oos <- function(N=100, K=6, n_mean=200, n_sd=0, eps_study_m=0.05, eps_study_tau=3,
eps_study_age=0.05, distribution="same", target_dist="same", eps_target=0) {
## Simulate training and target (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, eps_study_m, eps_study_tau,
eps_study_age, distribution, target_dist, eps_target)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
## Fit mixed effects models
#correct
mod <- lmer(Y ~  madrs + sex + W*age +
(W + W:age | S), data=train_dat,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=10000)))
sum <- summary(mod)
#incorrect
mod_wrong <- lmer(Y ~  madrs + sex + W*age +
(W | S), data=train_dat,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=10000)))
sum_wrong <- summary(mod_wrong)
## Calculate mean and CIs for individuals and assess accuracy
#confidence interval
glht_train <- glht_ci(train_dat, mod)
glht_target <- glht_ci(target_dat, mod)
glht_res <- assess_interval(glht_train, glht_target)
#confidence interval - incorrectly specified
glht_train_wrong <- glht_ci(train_dat, mod_wrong)
glht_target_wrong <- glht_ci(target_dat, mod_wrong)
glht_res_wrong <- assess_interval(glht_train_wrong, glht_target_wrong)
#manual PI
manual_train <- manual_pi(train_dat, mod, K, rand_int=T)
manual_target <- manual_pi(target_dat, mod, K, rand_int=T)
manual_res <- assess_interval(manual_train, manual_target)
#manual PI - incorrectly specified
manual_train_wrong <- manual_pi(train_dat, mod_wrong, K, rand_int=F)
manual_target_wrong <- manual_pi(target_dat, mod_wrong, K, rand_int=F)
manual_res_wrong <- assess_interval(manual_train_wrong, manual_target_wrong)
#bootstrap PI
boot_train <- boot_pi(train_dat, mod, rand_int=T)
boot_target <- boot_pi(target_dat, mod, rand_int=T)
boot_res <- assess_interval(boot_train, boot_target)
#bootstrap PI - incorrectly specified
boot_train_wrong <- boot_pi(train_dat, mod_wrong, rand_int=F)
boot_target_wrong <- boot_pi(target_dat, mod_wrong, rand_int=F)
boot_res_wrong <- assess_interval(boot_train_wrong, boot_target_wrong)
## Save results
#data frame of parameters
params <- data.frame(N=N, K=K, n_mean=n_mean, n_sd=n_sd, eps_study_m=eps_study_m,
eps_study_tau=eps_study_tau, eps_study_age=eps_study_age,
distribution=distribution, target_dist=target_dist, eps_target=eps_target)
#data frame of results
all_res <- cbind(glht_res, glht_res_wrong, manual_res,
manual_res_wrong, boot_res, boot_res_wrong) %>%
data.frame() %>%
rownames_to_column("Metric") %>%
cbind(params)
return(list(sum=sum, sum_wrong=sum_wrong, all_res=all_res))
}
results <- compare_oos(N=N, K=K, n_mean=n_mean, n_sd=n_sd, eps_study_m=eps_study_m,
eps_study_tau=eps_study_tau, eps_study_age=eps_study_age,
distribution=distribution, target_dist=target_dist, eps_target=eps_target)
results
boot_res_wrong
results$all_res
save(results, file=paste(paste("results",seed,N,K,n_mean,n_sd,eps_study_m,eps_study_tau,
eps_study_age,distribution,target_dist,eps_target,iteration,sep = "_"),
".Rdata",sep=""))
getwd()
load("~/Dropbox/Moderation/Out of Sample Prediction/results_1_100_10_200_0_0.05_0.05_0.05_same_same_0_1.Rdata")
results
load("~/Dropbox/Moderation/Out of Sample Prediction/results_1_100_10_200_0_0.05_0.05_0.05_same_same_0_1.Rdata")
results
# set up data
N <- 100
K <- 10
n_mean <- 200
n_sd <- 0
eps_target <- 0
settings <- expand.grid(eps_combo = c("0.05 0.05 0.05", "0.05 1 0.05", "0.05 1 1",
"1 1 1", "1 3 1"),
distribution = c("same", "varying_madrs", "halfdiff_madrsage", "separate_age"),
target_dist = c("same", "upweight", "different"),
iteration = c(1:100)) %>%
separate(eps_combo, into=c("eps_study_m", "eps_study_tau", "eps_study_age"), sep=" ") %>%
mutate(eps_study_m = as.numeric(eps_study_m),
eps_study_tau = as.numeric(eps_study_tau),
eps_study_age = as.numeric(eps_study_age))
#sets the row of the settings that you will use
i=as.numeric(Sys.getenv('SGE_TASK_ID'))
i=1
library(tidyverse)
library(rsample)
library(grf)
library(fastDummies)
library(nnet)
source("R/MDD_Generation_OOSEst.R")
source("R/MDD_Generation_OOSEst.R")
source("R/MA_OOSEst.R")
# set up data
N <- 100
K <- 10
n_mean <- 200
n_sd <- 0
eps_target <- 0
settings <- expand.grid(eps_combo = c("0.05 0.05 0.05", "0.05 1 0.05", "0.05 1 1",
"1 1 1", "1 3 1"),
distribution = c("same", "varying_madrs", "halfdiff_madrsage", "separate_age"),
target_dist = c("same", "upweight", "different"),
iteration = c(1:100)) %>%
separate(eps_combo, into=c("eps_study_m", "eps_study_tau", "eps_study_age"), sep=" ") %>%
mutate(eps_study_m = as.numeric(eps_study_m),
eps_study_tau = as.numeric(eps_study_tau),
eps_study_age = as.numeric(eps_study_age))
eps_study_m <- settings$eps_study_m[i]
eps_study_tau <- settings$eps_study_tau[i]
eps_study_age <- settings$eps_study_age[i]
distribution <- settings$distribution[i]
target_dist <- settings$target_dist[i]
iteration <- settings$iteration[i]
seed <- i
## Simulate training and target (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, eps_study_m, eps_study_tau,
eps_study_age, distribution, target_dist, eps_target)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
## Fit mixed effects models
#correct
mod <- lmer(Y ~  madrs + sex + W*age +
(W + W:age | S), data=train_dat,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=10000)))
VarCorr(mod)
summary(mod)
as.data.frame(VarCorr(mod))
library(mgcv)
?bam
