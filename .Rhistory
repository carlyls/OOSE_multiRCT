#define random slopes for moderators
eps_inter <- matrix(nrow=n, ncol=length(covars_rand))
colnames(eps_inter) <- paste0("eps_study_",covars_rand)
for (i in 1:length(covars_rand)) {
eps_inter[,i] <- rnorm(n=1, mean=0, sd=eps_study_inter[i])
}
#simulate data
dat <- MASS::mvrnorm(n=n, mu=mu, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(S = k,
sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n, mean=0, sd=.05),
W = rbinom(n=n, size=1, prob=.5),
eps_m = rnorm(n=1, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=1, mean=0, sd=eps_study_tau)) %>%
bind_cols(eps_inter)
return(dat)
}
#training data
train_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
#define covariance matrix
Sigma <- data.frame(age=c(165.6471, 0.2448, -0.5180, 1.6408, -0.9666),
sex=c(0.2448, 0.2183, -0.0218, -1.9030, 0.1380),
smstat=c(-0.5180, -0.0218, 0.2118, -0.1429, 0.1155),
weight=c(1.6408, -1.9030, -0.1428, 452.6100, -7.6864),
madrs=c(-0.9666, 0.1380, 0.1155, -7.6864, 17.5343),
row.names=c("age","sex","smstat","weight","madrs"))
for (k in 1:K) {
n <- n_study[k]
#sample
dat <- sample_dist(K, k, n, Sigma, eps_study_m, eps_study_tau, eps_study_inter, distribution)
train_dat <- bind_rows(train_dat, dat)
}
View(train_dat)
target_dat <- train_dat[sample(nrow(train_dat), n_target),] %>%
dplyr::select(-S, -eps_m, -eps_tau, -eps_age)
#interior function
sample_dist <- function(K, k, n, Sigma, eps_study_m, eps_study_tau, eps_study_inter, distribution) {
#define mu based on distribution input
if (distribution == "same") {
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
} else if (distribution == "varying_madrs") {
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088-k*1.5)
} else if (distribution == "halfdiff_madrsage") {
if (k%%2 == 0 ) {
mu <- c(age=50, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=40)
} else {
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
}
} else if (distribution == "separate_age") {
ages <- seq(30, 55, length.out=K)
mu <- c(age=ages[k], sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
}
#define random slopes for moderators
eps_inter <- matrix(nrow=n, ncol=length(covars_rand))
colnames(eps_inter) <- paste0("eps_",covars_rand)
for (i in 1:length(covars_rand)) {
eps_inter[,i] <- rnorm(n=1, mean=0, sd=eps_study_inter[i])
}
#simulate data
dat <- MASS::mvrnorm(n=n, mu=mu, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(S = k,
W = rbinom(n=n, size=1, prob=.5),
sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n, mean=0, sd=.05),
eps_m = rnorm(n=1, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=1, mean=0, sd=eps_study_tau)) %>%
bind_cols(eps_inter)
return(dat)
}
#training data
train_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
#define covariance matrix
Sigma <- data.frame(age=c(165.6471, 0.2448, -0.5180, 1.6408, -0.9666),
sex=c(0.2448, 0.2183, -0.0218, -1.9030, 0.1380),
smstat=c(-0.5180, -0.0218, 0.2118, -0.1429, 0.1155),
weight=c(1.6408, -1.9030, -0.1428, 452.6100, -7.6864),
madrs=c(-0.9666, 0.1380, 0.1155, -7.6864, 17.5343),
row.names=c("age","sex","smstat","weight","madrs"))
for (k in 1:K) {
n <- n_study[k]
#sample
dat <- sample_dist(K, k, n, Sigma, eps_study_m, eps_study_tau, eps_study_inter, distribution)
train_dat <- bind_rows(train_dat, dat)
}
target_dat <- train_dat[sample(nrow(train_dat), n_target),] %>%
dplyr::select(-S, -contains("eps_"))
head(target_dat)
target_mean <- c(age=30, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=25)
target_dat <- MASS::mvrnorm(n=n_target, mu=target_mean, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n_target, mean=0, sd=.05),
W = rbinom(n=n_target, size=1, prob=.5))
head(target_dat)
target_dat <- train_dat[sample(nrow(train_dat), n_target),] %>%
dplyr::select(-S, -contains("eps_"))
#define random slopes for moderators in target sample
eps_inter_target <- matrix(nrow=n_target, ncol=length(covars_rand))
eps_inter_target
colnames(eps_inter_target) <- paste0("eps_",covars_rand)
#define random slopes for moderators in target sample
eps_inter_target <- matrix(nrow=n_target, ncol=length(covars_rand))
colnames(eps_inter_target) <- paste0("eps_",covars_rand)
for (i in 1:length(covars_rand)) {
eps_inter_target[,i] <- rnorm(n=n_target, mean=0, sd=eps_study_inter[i])
}
head(eps_inter_target)
#define random slopes for moderators in target sample
eps_inter_target <- matrix(nrow=n_target, ncol=length(covars_rand))
colnames(eps_inter_target) <- paste0("eps_",covars_rand)
for (i in 1:length(covars_rand)) {
eps_inter_target[,i] <- rnorm(n=n_target, mean=0, sd=eps_study_inter[i])
}
#add error terms to target sample
target_dat <- target_dat %>%
mutate(eps_m = rnorm(n=n_target, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=n_target, mean=0, sd=eps_study_tau)) %>%
bind_cols(eps_inter_target)
head(target_dat)
covars_fix = "age" & covars_rand = "age"
covars_fix == "age" & covars_rand == "age"
covars_fix
covars_fix == "age"
covars_fix == "age" && covars_rand == "age"
covars_fix == c("age")
dim(covars_fix) = dim_covars(rand) == 1
dim(covars_fix) = dim(covars_rand) == 1
dim(covars_fix) == 1 & dim(covars_rand) ==
1
dim(covars_fix) ==1
length(covars_fix) == 1 & length(covars_rand) == 1
length(covars_fix) == 1 & length(covars_rand) == 1 & covars_fix == "age" & covars_rand == "age"
head(train_dat)
covars_fix == c("age", "madrs")
K=10
n_mean=500
n_sd=0
n_target=100
eps_study_m=0.05
eps_study_tau=0.05
eps_study_age=0.05
distribution="same"
target_dist="same"
covars_fix="age"
covars_rand="age"
eps_study_inter=0.05
library(tidyverse)
library(lme4)
library(rsample)
library(multcomp)
library(MASS)
source("R/MDD_Generation_OOSEst.R")
## Simulate training and target (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, n_target, eps_study_m, eps_study_tau,
eps_study_inter, distribution, target_dist, covars_fix, covars_rand)
#interior function
sample_dist <- function(K, k, n, Sigma, eps_study_m, eps_study_tau, eps_study_inter, distribution) {
#define mu based on distribution input
if (distribution == "same") {
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
} else if (distribution == "varying_madrs") {
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088-k*1.5)
} else if (distribution == "halfdiff_madrsage") {
if (k%%2 == 0 ) {
mu <- c(age=50, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=40)
} else {
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
}
} else if (distribution == "separate_age") {
ages <- seq(30, 55, length.out=K)
mu <- c(age=ages[k], sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
}
#define random slopes for moderators
eps_inter <- matrix(nrow=n, ncol=length(covars_rand))
colnames(eps_inter) <- paste0("eps_",covars_rand)
for (i in 1:length(covars_rand)) {
eps_inter[,i] <- rnorm(n=1, mean=0, sd=eps_study_inter[i])
}
#simulate data
dat <- MASS::mvrnorm(n=n, mu=mu, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(S = k,
W = rbinom(n=n, size=1, prob=.5),
sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n, mean=0, sd=.05),
eps_m = rnorm(n=1, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=1, mean=0, sd=eps_study_tau)) %>%
bind_cols(eps_inter)
return(dat)
}
#training data
train_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
#define covariance matrix
Sigma <- data.frame(age=c(165.6471, 0.2448, -0.5180, 1.6408, -0.9666),
sex=c(0.2448, 0.2183, -0.0218, -1.9030, 0.1380),
smstat=c(-0.5180, -0.0218, 0.2118, -0.1429, 0.1155),
weight=c(1.6408, -1.9030, -0.1428, 452.6100, -7.6864),
madrs=c(-0.9666, 0.1380, 0.1155, -7.6864, 17.5343),
row.names=c("age","sex","smstat","weight","madrs"))
for (k in 1:K) {
n <- n_study[k]
#sample
dat <- sample_dist(K, k, n, Sigma, eps_study_m, eps_study_tau, eps_study_inter, distribution)
train_dat <- bind_rows(train_dat, dat)
}
head(train_dat)
#target data
if (target_dist == "same") {
target_dat <- train_dat[sample(nrow(train_dat), n_target),] %>%
dplyr::select(-S, -contains("eps_"))
} else if (target_dist == "upweight") {
train_weight <- train_dat %>%
mutate(study_weight = ifelse(S %in% c(3, 5), 3, 1))
target_dat <- train_weight[sample(nrow(train_weight), n_target, prob=train_weight$study_weight),] %>%
dplyr::select(-study_weight, -S, -contains("eps_"))
} else if (target_dist == "different") {
target_mean <- c(age=30, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=25)
target_dat <- MASS::mvrnorm(n=n_target, mu=target_mean, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n_target, mean=0, sd=.05),
W = rbinom(n=n_target, size=1, prob=.5))
}
#define random slopes for moderators in target sample
eps_inter_target <- matrix(nrow=n_target, ncol=length(covars_rand))
colnames(eps_inter_target) <- paste0("eps_",covars_rand)
for (i in 1:length(covars_rand)) {
eps_inter_target[,i] <- rnorm(n=n_target, mean=0, sd=eps_study_inter[i])
}
#add error terms to target sample
target_dat <- target_dat %>%
mutate(eps_m = rnorm(n=n_target, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=n_target, mean=0, sd=eps_study_tau)) %>%
bind_cols(eps_inter_target)
#standardize variables
#add m and tau
train_dat <- train_dat %>%
mutate(age = (age - mean(age))/sd(age),
madrs = (madrs - mean(madrs))/sd(madrs),
weight = (weight - mean(weight))/sd(weight))
target_dat <- target_dat %>%
mutate(age = (age - mean(age))/sd(age),
madrs = (madrs - mean(madrs))/sd(madrs),
weight = (weight - mean(weight))/sd(weight))
if (length(covars_fix) == 1 & length(covars_rand) == 1) {
train_dat <- train_dat %>%
mutate(m = (-17.40 + eps_m) - 0.13*age - 2.05*madrs - 0.11*sex,
tau = (2.505 + eps_tau) + (0.82 + eps_age)*age)
target_dat <- target_dat %>%
mutate(m = (-17.40 + eps_m) - 0.13*age - 2.05*madrs - 0.11*sex,
tau = (2.505 + eps_tau) + (0.82 + eps_age)*age)
} else if (covars_fix == c("age", "madrs") & covars_rand == c("age", "madrs")) {
## FIGURE THIS OUT
} else if (covars_fix == c("age", "sex") & covars_rand == c("age", "sex")) {
## FIGURE THIS OUT
} else if (covars_fix == c("age", "sex") & covars_rand == c("age")) {
## FIGURE THIS OUT
}
head(train_dat)
#outcome Y
train_dat <- train_dat %>%
mutate(Y = m + W*tau + eps,
S = factor(S)) %>%
dplyr::select(S, W, sex, smstat, weight, age, madrs, Y, tau)
target_dat <- target_dat %>%
mutate(Y = m + W*tau + eps) %>%
dplyr::select(W, sex, smstat, weight, age, madrs, Y, tau)
head(train_dat)
head(target_dat)
summary(train_dat$tau)
summary(target_dat$tau)
## Fit mixed effects models
#correct
formula <- as.formula(paste0("Y ~ madrs + sex + age + W + ",
paste("W", covars_fix, sep=":", collapse=" + "),
" + (W + ",
paste("W", covars_rand, sep=":", collapse=" + "),
" | S)"))
mod <- lmer(formula, data=train_dat,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=10000)))
sum <- summary(mod)
sum
#incorrect
formula_wrong <- as.formula(paste0("Y ~ madrs + sex + age + W + ",
paste("W", covars_fix, sep=":", collapse=" + "),
" + (W | S)"))
mod_wrong <- lmer(formula_wrong, data=train_dat,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=10000)))
sum_wrong <- summary(mod_wrong)
df <- train_dat
covars_fix
K
#prediction interval by hand ####
#get variance components of model
matrix_var <- function(mod) {
#calculate variances
fc <- vcov(mod) #covariance matrix of fixed effects
rc <- Matrix::bdiag(VarCorr(mod)) #variance and covariances of random effects
#fixed effects
beta <- fixef(mod)[grep("W", names(fixef(mod)))] %>% matrix() #beta-hat
var_beta <- fc[grep("W", rownames(fc)),
grep("W", colnames(fc))] #Var(beta-hat)
#random effects
u <- ranef(mod)$S[grep("W", colnames(ranef(mod)$S))] %>% t() %>% matrix()
var_rand <- rc[grep("W", rownames(rc)),
grep("W", colnames(rc))]
return(list(beta=beta, var_beta=var_beta, u=u, var_rand=var_rand))
}
#get variances
res <- matrix_var(mod)
beta <- res$beta
var_beta <- res$var_beta
u <- res$u
var_rand <- res$var_rand
beta
var_beta
u
var_rand
#calculate theta-hats
X <- df %>%
dplyr::select(W, all_of(covars_fix)) %>%
mutate(W = 1) %>%
as.matrix()
Z <- df %>%
dplyr::select(W, all_of(covars_rand)) %>%
mutate(W = 1) %>%
as.matrix()
head(X)
head(Z)
if ("S" %in% names(df)) { #training data structure is different
Zlist <- list()
var_rand_train <- rep(list(var_rand), K)
var_rand <- do.call("bdiag", var_rand_train) %>% as.matrix()
for (s in 1:K) {
Z_S <- Z[df$S==s,]
Zlist[[s]] <- Z_S
}
Z <- do.call("bdiag", Zlist) %>% as.matrix()
mean_theta <- X %*% beta + Z %*% u %>% c()
} else { #don't know u's for target data
mean_theta <- X %*% beta %>% c() #theta-hat
}
head(Z)
head(u)
head(var_rand)
## Simulate training and target (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, n_target, eps_study_m, eps_study_tau,
eps_study_inter, distribution, target_dist, covars_fix, covars_rand)
eps_study_inter
eps_study_inter[1]
K=10
n_mean=500
n_sd=0
n_target=100
covars_fix="age"
covars_rand="age"
eps_study_inter=0.05
eps_study_tau=0.05
eps_study_m=0.05
distribution="same"
target_dist="same"
#interior function
sample_dist <- function(K, k, n, Sigma, eps_study_m, eps_study_tau, eps_study_inter, distribution) {
#define mu based on distribution input
if (distribution == "same") {
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
} else if (distribution == "varying_madrs") {
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088-k*1.5)
} else if (distribution == "halfdiff_madrsage") {
if (k%%2 == 0 ) {
mu <- c(age=50, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=40)
} else {
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
}
} else if (distribution == "separate_age") {
ages <- seq(30, 55, length.out=K)
mu <- c(age=ages[k], sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
}
#define random slopes for moderators
eps_inter <- matrix(nrow=n, ncol=length(covars_rand))
colnames(eps_inter) <- paste0("eps_",covars_rand)
for (i in 1:length(covars_rand)) {
eps_inter[,i] <- rnorm(n=1, mean=0, sd=eps_study_inter[i])
}
#simulate data
dat <- MASS::mvrnorm(n=n, mu=mu, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(S = k,
W = rbinom(n=n, size=1, prob=.5),
sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n, mean=0, sd=.05),
eps_m = rnorm(n=1, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=1, mean=0, sd=eps_study_tau)) %>%
bind_cols(eps_inter)
return(dat)
}
#main function
gen_mdd <- function (K=10, n_mean=500, n_sd=0, n_target=100, covars_fix="age", covars_rand="age",
eps_study_m=0.05, eps_study_tau=0.05, eps_study_inter=0.05,
distribution="same", target_dist="same") {
#training data
train_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
#define covariance matrix
Sigma <- data.frame(age=c(165.6471, 0.2448, -0.5180, 1.6408, -0.9666),
sex=c(0.2448, 0.2183, -0.0218, -1.9030, 0.1380),
smstat=c(-0.5180, -0.0218, 0.2118, -0.1429, 0.1155),
weight=c(1.6408, -1.9030, -0.1428, 452.6100, -7.6864),
madrs=c(-0.9666, 0.1380, 0.1155, -7.6864, 17.5343),
row.names=c("age","sex","smstat","weight","madrs"))
for (k in 1:K) {
n <- n_study[k]
#sample
dat <- sample_dist(K, k, n, Sigma, eps_study_m, eps_study_tau, eps_study_inter, distribution)
train_dat <- bind_rows(train_dat, dat)
}
#target data
if (target_dist == "same") {
target_dat <- train_dat[sample(nrow(train_dat), n_target),] %>%
dplyr::select(-S, -contains("eps_"))
} else if (target_dist == "upweight") {
train_weight <- train_dat %>%
mutate(study_weight = ifelse(S %in% c(3, 5), 3, 1))
target_dat <- train_weight[sample(nrow(train_weight), n_target, prob=train_weight$study_weight),] %>%
dplyr::select(-study_weight, -S, -contains("eps_"))
} else if (target_dist == "different") {
target_mean <- c(age=30, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=25)
target_dat <- MASS::mvrnorm(n=n_target, mu=target_mean, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n_target, mean=0, sd=.05),
W = rbinom(n=n_target, size=1, prob=.5))
}
#define random slopes for moderators in target sample
eps_inter_target <- matrix(nrow=n_target, ncol=length(covars_rand))
colnames(eps_inter_target) <- paste0("eps_",covars_rand)
for (i in 1:length(covars_rand)) {
eps_inter_target[,i] <- rnorm(n=n_target, mean=0, sd=eps_study_inter[i])
}
#add error terms to target sample
target_dat <- target_dat %>%
mutate(eps_m = rnorm(n=n_target, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=n_target, mean=0, sd=eps_study_tau)) %>%
bind_cols(eps_inter_target)
#standardize variables
#add m and tau
train_dat <- train_dat %>%
mutate(age = (age - mean(age))/sd(age),
madrs = (madrs - mean(madrs))/sd(madrs),
weight = (weight - mean(weight))/sd(weight))
target_dat <- target_dat %>%
mutate(age = (age - mean(age))/sd(age),
madrs = (madrs - mean(madrs))/sd(madrs),
weight = (weight - mean(weight))/sd(weight))
if (length(covars_fix) == 1 & length(covars_rand) == 1) {
train_dat <- train_dat %>%
mutate(m = (-17.40 + eps_m) - 0.13*age - 2.05*madrs - 0.11*sex,
tau = (2.505 + eps_tau) + (0.82 + eps_age)*age)
target_dat <- target_dat %>%
mutate(m = (-17.40 + eps_m) - 0.13*age - 2.05*madrs - 0.11*sex,
tau = (2.505 + eps_tau) + (0.82 + eps_age)*age)
} else if (covars_fix == c("age", "madrs") & covars_rand == c("age", "madrs")) {
## FIGURE THIS OUT
} else if (covars_fix == c("age", "sex") & covars_rand == c("age", "sex")) {
## FIGURE THIS OUT
} else if (covars_fix == c("age", "sex") & covars_rand == c("age")) {
## FIGURE THIS OUT
}
#outcome Y
train_dat <- train_dat %>%
mutate(Y = m + W*tau + eps,
S = factor(S)) %>%
dplyr::select(S, W, sex, smstat, weight, age, madrs, Y, tau)
target_dat <- target_dat %>%
mutate(Y = m + W*tau + eps) %>%
dplyr::select(W, sex, smstat, weight, age, madrs, Y, tau)
return(list(train_dat=train_dat, target_dat=target_dat))
}
## Simulate training and target (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, n_target, covars_fix, covars_rand,
eps_study_m, eps_study_tau, eps_study_inter,
distribution, target_dist)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
head(train_dat)
?glm
ranef(mod)
## Fit mixed effects models
#correct
formula <- as.formula(paste0("Y ~ madrs + sex + age + W + ",
paste("W", covars_fix, sep=":", collapse=" + "),
" + (W + ",
paste("W", covars_rand, sep=":", collapse=" + "),
" | S)"))
mod <- lmer(formula, data=train_dat,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=10000)))
sum <- summary(mod)
ranef(mod)
ranef(mod, cond.var=T)
ranef(mod, condVar=T)
