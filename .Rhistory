n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
for (k in 1:K) {
n <- n_study[k]
#sample covariates
dat <- data.frame(
#age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
sex = rbinom(n=n, size=1, prob=.65),
smstat = rbinom(n=n, size=1, prob=.3),
weight = rtruncnorm(n=n, a=45, b=140, mean=80, sd=15),
#madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1),
W = rbinom(n=n, size=1, prob=.5),
S = rep(k, n),
id = seq(1, n),
eps = rnorm(n, mean=0, sd=.05),
eps_study = rnorm(1, mean=0, sd=eps_study_sd)
)
#adjust distributions
dat <- add_agemadrs(dat, n, k, distribution) %>%
mutate(weight = round(weight, 2),
age = round(age, 2),
madrs = round(madrs, 0))
train_dat <- bind_rows(train_dat, dat)
}
library(truncnorm)
#training data
train_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
for (k in 1:K) {
n <- n_study[k]
#sample covariates
dat <- data.frame(
#age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
sex = rbinom(n=n, size=1, prob=.65),
smstat = rbinom(n=n, size=1, prob=.3),
weight = rtruncnorm(n=n, a=45, b=140, mean=80, sd=15),
#madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1),
W = rbinom(n=n, size=1, prob=.5),
S = rep(k, n),
id = seq(1, n),
eps = rnorm(n, mean=0, sd=.05),
eps_study = rnorm(1, mean=0, sd=eps_study_sd)
)
#adjust distributions
dat <- add_agemadrs(dat, n, k, distribution) %>%
mutate(weight = round(weight, 2),
age = round(age, 2),
madrs = round(madrs, 0))
train_dat <- bind_rows(train_dat, dat)
}
View(train_dat)
test_dat <- train_dat[sample(nrow(train_dat), 100),] %>%
select(-S, -id)
View(test_dat)
train_dat <- train_dat %>%
mutate(m = -0.02*age - 0.7*madrs - 0.15*sex,
tau = -8.5 + 0.07*age + 0.20*madrs + eps_study)
test_dat <- test_dat %>%
mutate(m = -0.02*age - 0.7*madrs - 0.15*sex,
tau = -8.5 + 0.07*age + 0.20*madrs)
study_main <- rnorm(K, mean=-10, sd=1)
study_inter <- rnorm(K, mean=0.25, sd=0.05)
study_tau <- rnorm(K, mean=3, sd=0.05)
study_main
study_inter
study_tau
train_dat <- train_dat %>%
mutate(study_main = study_main[S],
study_inter = study_inter[S],
study_tau = study_tau[S],
m = 10.7 + study_main - 0.02*age - 0.87*madrs -
0.15*sex + study_inter*madrs,
tau = -10.5 + 0.07*age + 0.20*madrs + study_tau) %>%
select(-study_main, -study_inter, -study_tau)
test_main <- rnorm(1, mean=-10, sd=1)
test_inter <- rnorm(1, mean=0.25, sd=0.05)
test_tau <- rnorm(1, mean=3, sd=0.05)
test_dat <- test_dat %>%
mutate(m = 10.7 + test_main - 0.02*age - 0.87*madrs -
0.15*sex + test_inter*madrs,
tau = -10.5 + 0.07*age + 0.20*madrs + test_tau)
test_main
study_main
#outcome Y
train_dat <- train_dat %>%
mutate(Y = round(m + W*tau + eps, 0),
S = factor(S)) %>%
select(S, id, W, sex, smstat, weight, age, madrs, Y, tau)
test_dat <- test_dat %>%
mutate(Y = round(m + W*tau + eps, 0)) %>%
select(W, sex, smstat, weight, age, madrs, Y, tau)
?MatchIt::matchit
library(tidyverse)
library(rsample)
library(truncnorm)
#interior function
add_agemadrs <- function(dat, n, k, distribution) {
#add age and madrs
if (distribution == "same") {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1))
} else if (distribution == "varying_madrs") {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
madrs = rtruncnorm(n=n, a=26-k*1.5, b=60-k*1.5, mean=31-k*1.5, sd=4.1))
} else if (distribution == "halfdiff_madrsage") {
if (k%%2 == 0 ) {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=30, b=75, mean=50, sd=10),
madrs = rtruncnorm(n=n, a=30, b=60, mean=40, sd=4.1))
} else {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1))
}
} else if (distribution == "separate_age") {
ages <- seq(18,75,by=(75-18)/10)
dat <- dat %>%
mutate(age = runif(n=n, min=ages[k], max=ages[k+1]),
madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1))
}
return(dat)
}
#main function
gen_mdd <- function (K=6, n_mean=200, n_sd=0, eps_study_sd=0.05, scenario="simple",
distribution="same", test_dist="same") {
#training data
train_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
for (k in 1:K) {
n <- n_study[k]
#sample covariates
dat <- data.frame(
#age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
sex = rbinom(n=n, size=1, prob=.65),
smstat = rbinom(n=n, size=1, prob=.3),
weight = rtruncnorm(n=n, a=45, b=140, mean=80, sd=15),
#madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1),
W = rbinom(n=n, size=1, prob=.5),
S = rep(k, n),
id = seq(1, n),
eps = rnorm(n, mean=0, sd=.05),
eps_study = rnorm(1, mean=0, sd=eps_study_sd)
)
#adjust distributions
dat <- add_agemadrs(dat, n, k, distribution) %>%
mutate(weight = round(weight, 2),
age = round(age, 2),
madrs = round(madrs, 0))
train_dat <- bind_rows(train_dat, dat)
}
#testing data
if (test_dist == "same") {
test_dat <- train_dat[sample(nrow(train_dat), 100),] %>%
select(-S, -id)
} else if (test_dist == "upweight") {
train_weight <- train_dat %>%
mutate(study_weight = ifelse(S %in% c(3, 5), 3, 1))
test_dat <- train_weight[sample(nrow(train_weight), 100, prob=train_weight$study_weight),] %>%
select(-study_weight, -S, -id)
} else if (test_dist == "different") {
test_dat <- data.frame(
sex = rbinom(n=100, size=1, prob=.65),
smstat = rbinom(n=100, size=1, prob=.3),
weight = rtruncnorm(n=100, a=45, b=140, mean=80, sd=15),
W = rbinom(n=100, size=1, prob=.5),
eps = rnorm(n=100, mean=0, sd=.05),
age = rtruncnorm(n=100, a=18, b=40, mean=25, sd=10), #younger
madrs = rtruncnorm(n=100, a=16, b=40, mean=25, sd=4.1) #less severe
)
}
#m and tau
if (scenario == "simple") {
train_dat <- train_dat %>%
mutate(m = -0.02*age - 0.7*madrs - 0.15*sex,
tau = -8.5 + 0.07*age + 0.20*madrs + eps_study)
test_dat <- test_dat %>%
mutate(m = -0.02*age - 0.7*madrs - 0.15*sex,
tau = -8.5 + 0.07*age + 0.20*madrs)
}
if (scenario == "linear") {
study_main <- rnorm(K, mean=-10, sd=1)
study_inter <- rnorm(K, mean=0.25, sd=0.05)
study_tau <- rnorm(K, mean=3, sd=0.05)
train_dat <- train_dat %>%
mutate(study_main = study_main[S],
study_inter = study_inter[S],
study_tau = study_tau[S],
m = 10.7 + study_main - 0.02*age - 0.87*madrs -
0.15*sex + study_inter*madrs,
tau = -10.5 + 0.07*age + 0.20*madrs + study_tau) %>%
select(-study_main, -study_inter, -study_tau)
test_main <- rnorm(1, mean=-10, sd=1)
test_inter <- rnorm(1, mean=0.25, sd=0.05)
test_tau <- rnorm(1, mean=3, sd=0.05)
test_dat <- test_dat %>%
mutate(m = 10.7 + test_main - 0.02*age - 0.87*madrs -
0.15*sex + test_inter*madrs,
tau = -10.5 + 0.07*age + 0.20*madrs + test_tau)
}
#outcome Y
train_dat <- train_dat %>%
mutate(Y = round(m + W*tau + eps, 0),
S = factor(S)) %>%
select(S, id, W, sex, smstat, weight, age, madrs, Y, tau)
test_dat <- test_dat %>%
mutate(Y = round(m + W*tau + eps, 0)) %>%
select(W, sex, smstat, weight, age, madrs, Y, tau)
return(list(train_dat=train_dat, test_dat=test_dat))
}
N=100
K=6
n_mean=200
n_sd=0
eps_study_sd=0.05
test_dist="same"
distribution="same"
scenario="linear"
## Simulate training and testing (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, eps_study_sd, scenario, distribution, test_dist)
train_dat <- sim_dat[["train_dat"]]
test_dat <- sim_dat[["test_dat"]]
View(train_dat)
# set up data
N <- 100
K <- 6
n_sd <- 0
settings <- expand.grid(n_mean = c(200, 500),
scenario_combo = c("simple 0.01", "simple 0.05", "simple 1",
"simple 3", "linear 0"),
distribution = c("same", "varying_madrs", "halfdiff_madrsage", "separate_age"),
test_dist = c("same", "upweight", "different"),
iteration = c(1:500)) %>%
separate(scenario_combo, into=c("scenario", "eps_study_sd"), sep=" ")
settings
i=6
n_mean <- settings$n_mean[i]
eps_study_sd <- settings$eps_study_sd[i]
scenario <- settings$scenario[i]
distribution <- settings$distribution[i]
test_dist <- settings$test_dist[i]
iteration <- settings$iteration[i]
seed <- i
## Simulate training and testing (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, eps_study_sd, scenario, distribution, test_dist)
K
n_mean
n_sd
eps_study_sd
n_mean=200
settings <- expand.grid(n_mean = c(200, 500),
scenario_combo = c("simple 0.01", "simple 0.05", "simple 1",
"simple 3", "linear 0"),
distribution = c("same", "varying_madrs", "halfdiff_madrsage", "separate_age"),
test_dist = c("same", "upweight", "different"),
iteration = c(1:500)) %>%
separate(scenario_combo, into=c("scenario", "eps_study_sd"), sep=" ") %>%
mutate(eps_study_sd = as.numeric(eps_study_sd))
n_mean <- settings$n_mean[i]
eps_study_sd <- settings$eps_study_sd[i]
scenario <- settings$scenario[i]
distribution <- settings$distribution[i]
test_dist <- settings$test_dist[i]
iteration <- settings$iteration[i]
seed <- i
## Simulate training and testing (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, eps_study_sd, scenario, distribution, test_dist)
train_dat <- sim_dat[["train_dat"]]
test_dat <- sim_dat[["test_dat"]]
View(train_dat)
covars <- c("sex", "smstat", "weight", "age", "madrs")
feat <- select(train_dat, c(S,all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
tau_true <- train_dat$tau
## Fit models (for now, causal forest with pooling with trial indicator)
tau_forest <- causal_forest(X=feat, Y=train_dat$Y, W=train_dat$W,
num.threads=3, honesty=F, num.trees=1000)
## Fit models (for now, causal forest with pooling with trial indicator)
tau_forest <- grf::causal_forest(X=feat, Y=train_dat$Y, W=train_dat$W,
num.threads=3, honesty=F, num.trees=1000)
tau_forest
tau_hat <- predict(tau_forest, estimate.variance=T)
#mse for training data
train_mse <- mean((tau_hat$predictions - tau_true)^2)
head(tau_hat)
dat <- cbind(train_dat, tau_hat$predictions)
head(dat)
dat <- cbind(train_dat, tau_pred=tau_hat$predictions)
tree <- rpart::rpart(tau_pred ~ S + sex + smstat + weight + age + madrs, data=dat)
plot(tree)
rpart.plot::rpart.plot(tree)
tree <- rpart::rpart(tau_pred ~ S + sex + smstat + weight + age + madrs, data=dat)
rpart.plot::rpart.plot(tree)
settings <- expand.grid(n_mean = c(200, 500),
scenario_combo = c("simple 0.01", "simple 0.05", "simple 1",
"simple 3", "linear 0"),
distribution = c("same", "varying_madrs", "halfdiff_madrsage", "separate_age"),
test_dist = c("same", "upweight", "different"),
iteration = c(1:500)) %>%
separate(scenario_combo, into=c("scenario", "eps_study_sd"), sep=" ") %>%
mutate(eps_study_sd = as.numeric(eps_study_sd))
settings
?mvnorm
library(mvnorm)
library(MASS)
?mvrnorm
cov(train_dat)
library(tidyverse)
library(rsample)
library(truncnorm)
#interior function
add_agemadrs <- function(dat, n, k, distribution) {
#add age and madrs
if (distribution == "same") {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1))
} else if (distribution == "varying_madrs") {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
madrs = rtruncnorm(n=n, a=26-k*1.5, b=60-k*1.5, mean=31-k*1.5, sd=4.1))
} else if (distribution == "halfdiff_madrsage") {
if (k%%2 == 0 ) {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=30, b=75, mean=50, sd=10),
madrs = rtruncnorm(n=n, a=30, b=60, mean=40, sd=4.1))
} else {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1))
}
} else if (distribution == "separate_age") {
ages <- seq(18,75,by=(75-18)/10)
dat <- dat %>%
mutate(age = runif(n=n, min=ages[k], max=ages[k+1]),
madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1))
}
return(dat)
}
#main function
gen_mdd <- function (K=6, n_mean=200, n_sd=0, eps_study_m=0.05, eps_study_tau=0.01,
distribution="same", test_dist="same") {
#training data
train_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
for (k in 1:K) {
n <- n_study[k]
#sample covariates
dat <- data.frame(
#age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
sex = rbinom(n=n, size=1, prob=.65),
smstat = rbinom(n=n, size=1, prob=.3),
weight = rtruncnorm(n=n, a=45, b=140, mean=80, sd=15),
#madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1),
W = rbinom(n=n, size=1, prob=.5),
S = rep(k, n),
id = seq(1, n),
eps = rnorm(n, mean=0, sd=.05),
eps_m = rnorm(1, mean=0, sd=eps_study_sd),
eps_tau = rnorm(1, mean=0, sd=eps_study_sd)
)
#adjust distributions
dat <- add_agemadrs(dat, n, k, distribution) %>%
mutate(weight = round(weight, 2),
age = round(age, 2),
madrs = round(madrs, 0))
train_dat <- bind_rows(train_dat, dat)
}
#testing data
if (test_dist == "same") {
test_dat <- train_dat[sample(nrow(train_dat), 100),] %>%
select(-S, -id)
} else if (test_dist == "upweight") {
train_weight <- train_dat %>%
mutate(study_weight = ifelse(S %in% c(3, 5), 3, 1))
test_dat <- train_weight[sample(nrow(train_weight), 100, prob=train_weight$study_weight),] %>%
select(-study_weight, -S, -id)
} else if (test_dist == "different") {
test_dat <- data.frame(
sex = rbinom(n=100, size=1, prob=.65),
smstat = rbinom(n=100, size=1, prob=.3),
weight = rtruncnorm(n=100, a=45, b=140, mean=80, sd=15),
W = rbinom(n=100, size=1, prob=.5),
eps = rnorm(n=100, mean=0, sd=.05),
age = rtruncnorm(n=100, a=18, b=40, mean=25, sd=10), #younger
madrs = rtruncnorm(n=100, a=16, b=40, mean=25, sd=4.1) #less severe
)
}
#m and tau
train_dat <- train_dat %>%
mutate(m = -0.02*age - 0.7*madrs - 0.15*sex + eps_m,
tau = -8.5 + 0.07*age + 0.20*madrs + eps_tau)
test_dat <- test_dat %>%
mutate(m = -0.02*age - 0.7*madrs - 0.15*sex,
tau = -8.5 + 0.07*age + 0.20*madrs)
#outcome Y
train_dat <- train_dat %>%
mutate(Y = round(m + W*tau + eps, 0),
S = factor(S)) %>%
select(S, id, W, sex, smstat, weight, age, madrs, Y, tau)
test_dat <- test_dat %>%
mutate(Y = round(m + W*tau + eps, 0)) %>%
select(W, sex, smstat, weight, age, madrs, Y, tau)
return(list(train_dat=train_dat, test_dat=test_dat))
}
impute_rand <- function(N, test_dat, tau_forest) {
#assign study
new_dat <- test_dat %>%
slice(rep(1:n(), each=N)) %>%
mutate(S = sample(1:K, nrow(test_dat)*N, replace = T)) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
new_feat <- new_dat %>%
select(-c(W, tau, Y))
#predict CATE
new_dat$tau_hat <- predict(tau_forest, newdata = new_feat)$predictions
#create confidence intervals
cis <- new_dat %>%
group_by(sex, smstat, weight, age, madrs, tau) %>%
summarise(mean = mean(tau_hat),
sd = sd(tau_hat)) %>%
mutate(lower = mean + qt(.025, df=N-1)*sd,
upper = mean + qt(.975, df=N-1)*sd)
#calculate accuracy
mse <- mean((cis$mean - cis$tau)^2)
ci_coverage <- sum(ifelse(cis$tau >= cis$lower & cis$tau <= cis$upper, 1, 0))/nrow(cis)
ci_length <- mean(cis$upper - cis$lower)
return(list(mse=mse, ci_coverage=ci_coverage, ci_length=ci_length, cis=cis))
}
impute_mem <- function(N, train_dat, test_dat, tau_forest) {
#create membership model
mem_mod <- multinom(S ~ sex + smstat + weight + age + madrs + Y, data=train_dat)
#summary(mem_mod)
#round(fitted(mem_mod), 2) #looks at probabilities in each class
#preds <- predict(mem_mod, newdata = train_dat, "class")
#tab <- table(train_dat$S, preds); #round((sum(diag(tab))/sum(tab))*100,2)
#define probabilities
mem_probs <- predict(mem_mod, newdata = test_dat, type = "probs")
S_mem <- c()
for (i in 1:nrow(mem_probs)) {
S_mem <- c(S_mem, sample(1:K, N, replace=T, prob=mem_probs[i,]))
}
#assign study
new_mem <- test_dat %>%
slice(rep(1:n(), each=N)) %>%
mutate(S = S_mem) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
new_feat <- new_mem %>%
select(-c(W, tau, Y))
#predict CATE
new_mem$tau_hat <- predict(tau_forest, newdata = new_feat)$predictions
#create confidence intervals
cis <- new_mem %>%
group_by(sex, smstat, weight, age, madrs, tau) %>%
summarise(mean = mean(tau_hat),
sd = sd(tau_hat)) %>%
mutate(lower = mean + qt(.025, df=N-1)*sd,
upper = mean + qt(.975, df=N-1)*sd)
#calculate accuracy
mse <- mean((cis$mean - cis$tau)^2)
ci_coverage <- sum(ifelse(cis$tau >= cis$lower & cis$tau <= cis$upper, 1, 0))/nrow(cis)
ci_length <- mean(cis$upper - cis$lower)
return(list(mse=mse, ci_coverage=ci_coverage, ci_length=ci_length, cis=cis))
}
impute_default <- function(K, test_dat, tau_forest) {
#default method: https://grf-labs.github.io/grf/REFERENCE.html#missing-values
#assign study
#we don't need to replicate because we will get the same prediction each time
new_default <- test_dat %>%
mutate(S = factor(NA, levels=1:K)) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T, ignore_na = T)
new_feat <- new_default %>%
select(-c(W, tau, Y))
#predict CATE
cate_default <- predict(tau_forest, newdata = new_feat, estimate.variance = T)
new_default$mean <- cate_default$predictions
new_default$sd <- sqrt(cate_default$variance.estimates)
#create confidence intervals
cis <- new_default %>%
mutate(lower = mean + qt(.025, df=N-1)*sd,
upper = mean + qt(.975, df=N-1)*sd)
#calculate accuracy
mse <- mean((cis$mean - cis$tau)^2)
ci_coverage <- sum(ifelse(cis$tau >= cis$lower & cis$tau <= cis$upper, 1, 0))/nrow(cis)
ci_length <- mean(cis$upper - cis$lower)
return(list(mse=mse, ci_coverage=ci_coverage, ci_length=ci_length, cis=cis))
}
N=100
K=6
n_mean=200
n_sd=0
eps_study_sd=0.05
eps_study_m=0.05
eps_study_tau=0.01
distribution="same"
test_dist="same"
## Simulate training and testing (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, eps_study_m, eps_study_tau, distribution, test_dist)
train_dat <- sim_dat[["train_dat"]]
test_dat <- sim_dat[["test_dat"]]
head(train_dat)
cov(train_Dat)
cov(train_dat)
covars <- c("sex", "smstat", "weight", "age", "madrs")
x <- select(train_dat, c(S,all_of(covars)))
cov(x)
head(x)
x <- select(x, -S)
cov(x)
mean(x)
colMeans(x)
mvrnorm(mu=colMeans(x), Sigma=cov(x))
?causalToolbox::X_RF
