age = round(age, 2),
madrs = round(madrs, 0))
train_dat <- bind_rows(train_dat, dat)
}
ggplot(train_dat, aes(x=age)) + geom_histogram() + facet_wrap(~S)
for (i in 1:6) {
+ a <- filter(train_dat, S==i)
+ print(c(mean(a$age), mean(a$madrs)))}
for (i in 1:6) {
a <- filter(train_dat, S==i)
print(c(mean(a$age), mean(a$madrs)))}
head(train_dat)
test_dat <- train_dat[sample(nrow(train_dat), 100),] %>%
select(-S)
nrow(test_dat)
head(test_dat)
train_weight <- train_dat %>%
mutate(study_weight = ifelse(S %in% c(3, 5), 3, 1))
test_dat <- train_weight[sample(nrow(train_weight), 100, prob=train_weight$study_weight),] %>%
select(-study_weight, -S)
head(train_weight)
head(train_dat)
head(test_dat)
nrow(test_dat)
table(test_dat$sex)
test_dat <- train_weight[sample(nrow(train_weight), 100, prob=train_weight$study_weight),] %>%
select(-study_weight)
table(test_dat$S)
test_dat <- train_weight[sample(nrow(train_weight), 100, prob=train_weight$study_weight),] %>%
select(-study_weight, -S)
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
mu
test_mean <- c(age=30, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=25)
test_dat <- MASS::mvrnorm(n=100, mu=test_mean, Sigma=Sigma) %>%
mutate(W = rbinom(n=100, size=1, prob=.5),
eps = rnorm(n=100, mean=0, sd=.05))
test_dat <- MASS::mvrnorm(n=100, mu=test_mean, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(W = rbinom(n=100, size=1, prob=.5),
eps = rnorm(n=100, mean=0, sd=.05))
head(test_dat)
test_dat <- train_dat[sample(nrow(train_dat), 100),] %>%
select(-S, -eps_m, -eps_tau)
head(test_dat)
test_dat <- train_weight[sample(nrow(train_weight), 100, prob=train_weight$study_weight),] %>%
select(-study_weight, -S, -eps_m, -eps_tau)
head(test_dat)
test_mean <- c(age=30, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=25)
test_dat <- MASS::mvrnorm(n=100, mu=test_mean, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(eps = rnorm(n=100, mean=0, sd=.05),
W = rbinom(n=100, size=1, prob=.5))
head(test_dat)
test_dat <- MASS::mvrnorm(n=100, mu=test_mean, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=100, mean=0, sd=.05),
W = rbinom(n=100, size=1, prob=.5))
head(test_dat)
head(train_dat)
distribution="same"
#training data
train_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
#define covariance matrix
Sigma <- data.frame(age=c(165.6471, 0.2448, -0.5180, 1.6408, -0.9666),
sex=c(0.2448, 0.2183, -0.0218, -1.9030, 0.1380),
smstat=c(-0.5180, -0.0218, 0.2118, -0.1429, 0.1155),
weight=c(1.6408, -1.9030, -0.1428, 452.6100, -7.6864),
madrs=c(-0.9666, 0.1380, 0.1155, -7.6864, 17.5343),
row.names=c("age","sex","smstat","weight","madrs"))
for (k in 1:K) {
n <- n_study[k]
#sample
dat <- sample_dist(k, n, Sigma, distribution)
train_dat <- bind_rows(train_dat, dat)
}
#testing data
if (test_dist == "same") {
test_dat <- train_dat[sample(nrow(train_dat), 100),] %>%
select(-S, -eps_m, -eps_tau)
} else if (test_dist == "upweight") {
train_weight <- train_dat %>%
mutate(study_weight = ifelse(S %in% c(3, 5), 3, 1))
test_dat <- train_weight[sample(nrow(train_weight), 100, prob=train_weight$study_weight),] %>%
select(-study_weight, -S, -eps_m, -eps_tau)
} else if (test_dist == "different") {
test_mean <- c(age=30, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=25)
test_dat <- MASS::mvrnorm(n=100, mu=test_mean, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=100, mean=0, sd=.05),
W = rbinom(n=100, size=1, prob=.5))
}
head(test_dat)
head(train_dat)
#m and tau
train_dat <- train_dat %>%
mutate(m = -0.02*age - 0.7*madrs - 0.15*sex + eps_m,
tau = -8.5 + 0.07*age + 0.20*madrs + eps_tau)
head(train_dat)
test_dat <- test_dat %>%
mutate(m = -0.02*age - 0.7*madrs - 0.15*sex,
tau = -8.5 + 0.07*age + 0.20*madrs)
head(test_dat)
#outcome Y
train_dat <- train_dat %>%
mutate(Y = m + W*tau + eps,
S = factor(S)) %>%
select(S, W, sex, smstat, weight, age, madrs, Y, tau)
head(train_dat)
test_dat <- test_dat %>%
mutate(Y = m + W*tau + eps) %>%
select(W, sex, smstat, weight, age, madrs, Y, tau)
head(test_dat)
settings <- expand.grid(n_mean = c(200, 500),
eps_combo = c("0.05 0.01", "1 0.01", "1 0.05",
"1 1", "2 1"),
distribution = c("same", "varying_madrs", "halfdiff_madrsage", "separate_age"),
test_dist = c("same", "upweight", "different"),
iteration = c(1:500)) %>%
separate(eps_combo, into=c("eps_study_m", "eps_study_tau"), sep=" ") %>%
mutate(eps_study_m = as.numeric(eps_study_m),
eps_study_tau = as.numeric(eps_study_tau))
distribution="same", test_dist="same"
settings
nrow(settings)
#interior function
sample_dist <- function(k, n, Sigma, distribution) {
#define mu based on distribution input
if (distribution == "same") {
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
} else if (distribution == "varying_madrs") {
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088-k*1.5)
} else if (distribution == "halfdiff_madrsage") {
if (k%%2 == 0 ) {
mu <- c(age=50, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=40)
} else {
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
}
} else if (distribution == "separate_age") {
ages <- c(30, 35, 40, 45, 50, 55)
mu <- c(age=ages[k], sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
}
#simulate data
dat <- MASS::mvrnorm(n=n, mu=mu, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n, mean=0, sd=.05),
W = rbinom(n=n, size=1, prob=.5),
eps_m = rnorm(n=1, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=1, mean=0, sd=eps_study_tau),
S = k)
return(dat)
}
#main function
gen_mdd <- function (K=6, n_mean=200, n_sd=0, eps_study_m=0.05, eps_study_tau=0.01,
distribution="same", test_dist="same") {
#training data
train_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
#define covariance matrix
Sigma <- data.frame(age=c(165.6471, 0.2448, -0.5180, 1.6408, -0.9666),
sex=c(0.2448, 0.2183, -0.0218, -1.9030, 0.1380),
smstat=c(-0.5180, -0.0218, 0.2118, -0.1429, 0.1155),
weight=c(1.6408, -1.9030, -0.1428, 452.6100, -7.6864),
madrs=c(-0.9666, 0.1380, 0.1155, -7.6864, 17.5343),
row.names=c("age","sex","smstat","weight","madrs"))
for (k in 1:K) {
n <- n_study[k]
#sample
dat <- sample_dist(k, n, Sigma, distribution)
train_dat <- bind_rows(train_dat, dat)
}
#testing data
if (test_dist == "same") {
test_dat <- train_dat[sample(nrow(train_dat), 100),] %>%
select(-S, -eps_m, -eps_tau)
} else if (test_dist == "upweight") {
train_weight <- train_dat %>%
mutate(study_weight = ifelse(S %in% c(3, 5), 3, 1))
test_dat <- train_weight[sample(nrow(train_weight), 100, prob=train_weight$study_weight),] %>%
select(-study_weight, -S, -eps_m, -eps_tau)
} else if (test_dist == "different") {
test_mean <- c(age=30, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=25)
test_dat <- MASS::mvrnorm(n=100, mu=test_mean, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=100, mean=0, sd=.05),
W = rbinom(n=100, size=1, prob=.5))
}
#m and tau
train_dat <- train_dat %>%
mutate(m = -0.02*age - 0.7*madrs - 0.15*sex + eps_m,
tau = -8.5 + 0.07*age + 0.20*madrs + eps_tau)
test_dat <- test_dat %>%
mutate(m = -0.02*age - 0.7*madrs - 0.15*sex,
tau = -8.5 + 0.07*age + 0.20*madrs)
#outcome Y
train_dat <- train_dat %>%
mutate(Y = m + W*tau + eps,
S = factor(S)) %>%
select(S, W, sex, smstat, weight, age, madrs, Y, tau)
test_dat <- test_dat %>%
mutate(Y = m + W*tau + eps) %>%
select(W, sex, smstat, weight, age, madrs, Y, tau)
return(list(train_dat=train_dat, test_dat=test_dat))
}
## Simulate training and testing (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, eps_study_m, eps_study_tau, distribution, test_dist)
nrow(sim_dat)
sim_dat
train_dat <- sim_dat[["train_dat"]]
test_dat <- sim_dat[["test_dat"]]
library(tidyverse)
library(rsample)
library(grf)
library(fastDummies)
library(nnet)
#source("Comparing_methods_functions.R")
source("MDD_Simulation_OOSEst.R")
impute_rand <- function(N, target_dat, tau_forest) {
#assign study
new_dat <- target_dat %>%
slice(rep(1:n(), each=N)) %>%
mutate(S = sample(1:K, nrow(target_dat)*N, replace = T)) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
new_feat <- new_dat %>%
select(-c(W, tau, Y))
#predict CATE
new_dat$tau_hat <- predict(tau_forest, newdata = new_feat)$predictions
#create confidence intervals
cis <- new_dat %>%
group_by(sex, smstat, weight, age, madrs, tau) %>%
summarise(mean = mean(tau_hat),
sd = sd(tau_hat)) %>%
mutate(lower = mean + qt(.025, df=N-1)*sd,
upper = mean + qt(.975, df=N-1)*sd)
#calculate accuracy
mse <- mean((cis$mean - cis$tau)^2)
ci_coverage <- sum(ifelse(cis$tau >= cis$lower & cis$tau <= cis$upper, 1, 0))/nrow(cis)
ci_length <- mean(cis$upper - cis$lower)
return(list(mse=mse, ci_coverage=ci_coverage, ci_length=ci_length, cis=cis))
}
impute_mem <- function(N, train_dat, target_dat, tau_forest) {
#create membership model
mem_mod <- multinom(S ~ sex + smstat + weight + age + madrs + Y, data=train_dat)
#summary(mem_mod)
#round(fitted(mem_mod), 2) #looks at probabilities in each class
#preds <- predict(mem_mod, newdata = train_dat, "class")
#tab <- table(train_dat$S, preds); #round((sum(diag(tab))/sum(tab))*100,2)
#define probabilities
mem_probs <- predict(mem_mod, newdata = target_dat, type = "probs")
S_mem <- c()
for (i in 1:nrow(mem_probs)) {
S_mem <- c(S_mem, sample(1:K, N, replace=T, prob=mem_probs[i,]))
}
#assign study
new_mem <- target_dat %>%
slice(rep(1:n(), each=N)) %>%
mutate(S = S_mem) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
new_feat <- new_mem %>%
select(-c(W, tau, Y))
#predict CATE
new_mem$tau_hat <- predict(tau_forest, newdata = new_feat)$predictions
#create confidence intervals
cis <- new_mem %>%
group_by(sex, smstat, weight, age, madrs, tau) %>%
summarise(mean = mean(tau_hat),
sd = sd(tau_hat)) %>%
mutate(lower = mean + qt(.025, df=N-1)*sd,
upper = mean + qt(.975, df=N-1)*sd)
#calculate accuracy
mse <- mean((cis$mean - cis$tau)^2)
ci_coverage <- sum(ifelse(cis$tau >= cis$lower & cis$tau <= cis$upper, 1, 0))/nrow(cis)
ci_length <- mean(cis$upper - cis$lower)
return(list(mse=mse, ci_coverage=ci_coverage, ci_length=ci_length, cis=cis))
}
impute_default <- function(K, target_dat, tau_forest) {
#default method: https://grf-labs.github.io/grf/REFERENCE.html#missing-values
#assign study
#we don't need to replicate because we will get the same prediction each time
new_default <- target_dat %>%
mutate(S = factor(NA, levels=1:K)) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T, ignore_na = T)
new_feat <- new_default %>%
select(-c(W, tau, Y))
#predict CATE
cate_default <- predict(tau_forest, newdata = new_feat, estimate.variance = T)
new_default$mean <- cate_default$predictions
new_default$sd <- sqrt(cate_default$variance.estimates)
#create confidence intervals
cis <- new_default %>%
mutate(lower = mean + qt(.025, df=N-1)*sd,
upper = mean + qt(.975, df=N-1)*sd)
#calculate accuracy
mse <- mean((cis$mean - cis$tau)^2)
ci_coverage <- sum(ifelse(cis$tau >= cis$lower & cis$tau <= cis$upper, 1, 0))/nrow(cis)
ci_length <- mean(cis$upper - cis$lower)
return(list(mse=mse, ci_coverage=ci_coverage, ci_length=ci_length, cis=cis))
}
compare_oos <- function(N=100, K=6, n_mean=200, n_sd=0, eps_study_m=0.05,
eps_study_tau=0.01, distribution="same", target_dist="same") {
## Simulate training and target (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, eps_study_m, eps_study_tau, distribution, target_dist)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
covars <- c("sex", "smstat", "weight", "age", "madrs")
feat <- select(train_dat, c(S, all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
tau_true <- train_dat$tau
## Fit models (for now, causal forest with pooling with trial indicator)
tau_forest <- causal_forest(X=feat, Y=train_dat$Y, W=train_dat$W,
num.threads=3, honesty=F, num.trees=1000)
tau_hat <- predict(tau_forest, estimate.variance=T)
#mse for training data
train_mse <- mean((tau_hat$predictions - tau_true)^2)
#CI coverage for training data
sd <- sqrt(tau_hat$variance.estimates)
lower <- tau_hat$predictions + qt(.025, df=nrow(train_dat)-1)*sd
upper <- tau_hat$predictions + qt(.975, df=nrow(train_dat)-1)*sd
train_coverage <- sum(ifelse(tau_true >= lower & tau_true <= upper, 1, 0))/nrow(train_dat)
train_res <- c(train_mse=train_mse, train_coverage=train_coverage)
## Calculate mean and CIs for each target individual according to each imputation method
#random
res_rand <- impute_rand(N, target_dat, tau_forest)
#study membership model
res_mem <- impute_mem(N, train_dat, target_dat, tau_forest)
#within-forest default
res_default <- impute_default(K, target_dat, tau_forest)
## Save results
return(list(train_res=train_res, res_rand=res_rand,
res_mem=res_mem, res_default=res_default,
N=N, K=K, n_mean=n_mean, n_sd=n_sd,
scenario=scenario, distribution=distribution,
target_dat=target_dat, target_scenario=target_scenario))
}
a <- compare_oos()
## Simulate training and target (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, eps_study_m, eps_study_tau, distribution, target_dist)
train_dat <- sim_dat[["train_dat"]]
target_dist="same"
## Simulate training and target (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, eps_study_m, eps_study_tau, distribution, target_dist)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
covars <- c("sex", "smstat", "weight", "age", "madrs")
feat <- select(train_dat, c(S, all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
tau_true <- train_dat$tau
## Fit models (for now, causal forest with pooling with trial indicator)
tau_forest <- causal_forest(X=feat, Y=train_dat$Y, W=train_dat$W,
num.threads=3, honesty=F, num.trees=1000)
tau_hat <- predict(tau_forest, estimate.variance=T)
#mse for training data
train_mse <- mean((tau_hat$predictions - tau_true)^2)
#CI coverage for training data
sd <- sqrt(tau_hat$variance.estimates)
lower <- tau_hat$predictions + qt(.025, df=nrow(train_dat)-1)*sd
upper <- tau_hat$predictions + qt(.975, df=nrow(train_dat)-1)*sd
train_coverage <- sum(ifelse(tau_true >= lower & tau_true <= upper, 1, 0))/nrow(train_dat)
train_res <- c(train_mse=train_mse, train_coverage=train_coverage)
## Calculate mean and CIs for each target individual according to each imputation method
#random
res_rand <- impute_rand(N, target_dat, tau_forest)
N=100
## Calculate mean and CIs for each target individual according to each imputation method
#random
res_rand <- impute_rand(N, target_dat, tau_forest)
#study membership model
res_mem <- impute_mem(N, train_dat, target_dat, tau_forest)
#within-forest default
res_default <- impute_default(K, target_dat, tau_forest)
list(train_res=train_res, res_rand=res_rand,
res_mem=res_mem, res_default=res_default,
N=N, K=K, n_mean=n_mean, n_sd=n_sd,
scenario=scenario, distribution=distribution,
target_dat=target_dat, target_scenario=target_scenario)
list(train_res=train_res, res_rand=res_rand,
res_mem=res_mem, res_default=res_default,
N=N, K=K, n_mean=n_mean, n_sd=n_sd,
eps_study_m=eps_study_m, eps_study_tau=eps_study_tau,
distribution=distribution, target_dist=target_dist)
library(tidyverse)
library(rsample)
library(grf)
library(fastDummies)
library(nnet)
source("MDD_Simulation_OOSEst.R")
#simulate data
sim_dat <- gen_mdd(K=6, n_mean=200, n_sd=0, eps_study_m=0.05, eps_study_tau=0.01,
distribution="same", target_dist="same")
train_dat <- sim_dat[["train_dat"]]
source("MDD_Simulation_OOSEst.R")
#simulate data
sim_dat <- gen_mdd(K=6, n_mean=200, n_sd=0, eps_study_m=0.05, eps_study_tau=0.01,
distribution="same", target_dist="same")
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
head(train_dat)
library(lme4)
#fit typical model (no heterogeneity)
mod_avg <- lmer(Y ~ W + sex + smstat + weight + age + madrs +
(1 + W | S), data = train_dat)
summary(mod_avg)
#fit typical model (no heterogeneity)
mod_avg <- lmer(Y ~ W + sex + age + madrs + W:age + W:madrs +
(1 + W | S), data = train_dat)
summary(mod_avg)
#fit typical model (no heterogeneity)
mod_avg <- lmer(Y ~ W + sex + age + madrs +
(1 + W | S), data = train_dat)
summary(mod_avg)
fixef(mod_avg)
fixef(mod_avg)$W
summary(mod_avg)["W"]
fixef(mod_avg)["W"]
#prediction interval for treatment effect
mu <- fixef(mod_avg)["W"]
coef(mod_avg)
summary(mod_avg)$coef[, 2, drop = FALSE]
summary(mod_avg)$coef
mu
summary(mod_avg)$coef[, 2]
se <- summary(mod_avg)$coef[,2]["W"]
se
a <- summary(mod_avg)
a$sigma
a
ranef(a)
ranef(mod_avg)
ranef(mod_avg)$S$W
ranef(mod_avg)$S$W %>% var()
a
getME(mod_avg, "Z")
getME(mod_avg, "theta")
mu
tau <- 1.004e-05
tau
pred_lower <- mu - qt(.025, 4)*sqrt(tau2+se^2)
tau2 <- 1.004e-05 #how do I pull this out with code?
pred_lower <- mu - qt(.025, 4)*sqrt(tau2+se^2)
pred_lower
mu
pred_lower <- mu + qt(.025, 4)*sqrt(tau2+se^2)
pred_upper <- mu - qt(.025, 4)*sqrt(tau2+se^2)
print(paste0("(",pred_lower,", "pred_upper,")"))
print(paste0("(",pred_lower,", ",pred_upper,")"))
pred_lower <- round(mu + qt(.025, 4)*sqrt(tau2+se^2),2)
pred_upper <- round(mu - qt(.025, 4)*sqrt(tau2+se^2),2)
print(paste0("(",pred_lower,", ",pred_upper,")"))
head(train)
head(train_dat)
mean(train_dat$tau)
#add in heterogeneity in fixed effects
mod_het <- lmer(Y ~ W + sex + age + madrs + W:age + W:madrs +
(1 + W | S), data=train_dat)
summary(mod_het)
#add in heterogeneity in fixed and random effects
mod_ranhet <- lmer(Y ~ W + sex + age + madrs + W:age +
(1 + W + W:age | S), data=train_dat)
summary(mod_ranhet)
library(tidyverse)
library(rsample)
library(grf)
library(fastDummies)
library(nnet)
library(lme4)
source("MDD_Simulation_OOSEst.R")
#simulate data
sim_dat <- gen_mdd(K=6, n_mean=200, n_sd=0, eps_study_m=0.05, eps_study_tau=0.01,
distribution="same", target_dist="same")
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
covars <- c("sex", "smstat", "weight", "age", "madrs")
#fit typical model (no heterogeneity)
mod_avg <- lmer(Y ~ W + sex + age + madrs +
(1 + W | S), data=train_dat)
summary(mod_avg)
install.packages("pimeta")
library(pimeta)
?pima
fixef(mod_avg)
coef(mod_avg)
confint(mod_avg)
ranef(mod_avg)
vcov(mod_avg)
#prediction interval for treatment effect
mu <- fixef(mod_avg)["W"]
summary(mod_avg)
ranef(mod_avg)
var(ranef(mod_avg))
tau2 <- 1.004e-05 #how do I pull this out with code?
pred_lower <- round(mu + qt(.025, 4)*sqrt(tau2+se^2),2)
pred_upper <- round(mu - qt(.025, 4)*sqrt(tau2+se^2),2)
print(paste0("(",pred_lower,", ",pred_upper,")"))
#prediction interval for treatment effect
mu <- fixef(mod_avg)["W"]
se <- summary(mod_avg)$coef[,2]["W"]
tau2 <- 1.004e-05 #how do I pull this out with code?
pred_lower <- round(mu + qt(.025, 4)*sqrt(tau2+se^2),2)
pred_upper <- round(mu - qt(.025, 4)*sqrt(tau2+se^2),2)
print(paste0("(",pred_lower,", ",pred_upper,")"))
confint(fixef(mod_avg))
confint(mod_avg)
install.packages("metafor")
?metafor::rma
