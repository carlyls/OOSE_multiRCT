#use predict function on target data
#set up one row per study for all rows of target data
new_dat <- target_dat %>%
slice(rep(1:n(), each=K)) %>%
mutate(S = rep(1:K, nrow(target_dat)))
new_feat <- new_dat %>%
dplyr::select(c(W, S, all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
#define counterfactual
new_feat_cf <- new_feat %>%
mutate(W = as.numeric(W == 0))
#predict on target data
#get means and variance for each person
w_target <- new_feat$W
target_pred <- predict(sbart, new_feat)
target_pred_cf <- predict(sbart, new_feat_cf)
#calculate differences across all posterior draws
#get means and variance for each person
means_cate_target <- lower_cate_target <- upper_cate_target <- c()
for (i in 1:nrow(target_dat)) {
inds <- (K*(i-1)+1):(K*i)
train_inds <- c(target_pred[,inds])
test_inds <- c(target_pred_cf[,inds])
mu1_target <- w_target[i]*mean(train_inds) + (1-w_target[i])*mean(test_inds)
mu0_target <- (1-w_target[i])*mean(train_inds) + w_target[i]*mean(test_inds)
mean_cate_target <- mu1_target - mu0_target
var_cate_target <- var(train_inds) + var(test_inds)
means_cate_target <- c(means_cate_target, mean_cate_target)
lower_cate_target <- c(lower_cate_target,
mean_cate_target - 1.96*sqrt(var_cate_target))
upper_cate_target <- c(upper_cate_target,
mean_cate_target + 1.96*sqrt(var_cate_target))
}
target_res <- target_dat %>%
mutate(mean = means_cate_target,
lower = lower_cate_target,
upper = upper_cate_target)
inds <- (K*(i-1)+1):(K*i)
train_inds <- c(target_pred[,inds])
test_inds <- c(target_pred_cf[,inds])
head(train_inds)
summary(train_inds)
summary(tesst_inds)
summary(test_inds)
mu1_target <- w_target[i]*mean(train_inds) + (1-w_target[i])*mean(test_inds)
mu0_target <- (1-w_target[i])*mean(train_inds) + w_target[i]*mean(test_inds)
mu1_target
mu0_target
mean_cate_target <- mu1_target - mu0_target
var_cate_target <- var(train_inds) + var(test_inds)
mean_cate_target
i
View(target_dat)
w_target[i]
target_dat$W[100]
new_feat$W[100]
i
#predict on target data
#get means and variance for each person
w_target <- target_dat$W
target_pred <- predict(sbart, new_feat)
target_pred_cf <- predict(sbart, new_feat_cf)
#calculate differences across all posterior draws
#get means and variance for each person
means_cate_target <- lower_cate_target <- upper_cate_target <- c()
for (i in 1:nrow(target_dat)) {
inds <- (K*(i-1)+1):(K*i)
train_inds <- c(target_pred[,inds])
test_inds <- c(target_pred_cf[,inds])
mu1_target <- w_target[i]*mean(train_inds) + (1-w_target[i])*mean(test_inds)
mu0_target <- (1-w_target[i])*mean(train_inds) + w_target[i]*mean(test_inds)
mean_cate_target <- mu1_target - mu0_target
var_cate_target <- var(train_inds) + var(test_inds)
means_cate_target <- c(means_cate_target, mean_cate_target)
lower_cate_target <- c(lower_cate_target,
mean_cate_target - 1.96*sqrt(var_cate_target))
upper_cate_target <- c(upper_cate_target,
mean_cate_target + 1.96*sqrt(var_cate_target))
}
target_res <- target_dat %>%
mutate(mean = means_cate_target,
lower = lower_cate_target,
upper = upper_cate_target)
mean((target_res$tau - target_res$mean)^2)
sum(target_dat$mean <= target_dat$upper & target_dat$mean >= target_dat$lower)
sum(target_dat$tau <= target_dat$upper & target_dat$mean >= target_dat$lower)
sum(target_res$tau <= target_res$upper & target_res$mean >= target_res$lower)
train_dat$W == feat$W
#generate dataset using defaults
K <- 5
sim_dat <- gen_mdd(K=5, n_mean=100)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
#define covariates (ignore age^2 for now)
covars <- c("sex","smstat","weight","age","madrs")  #how to treat S as categorical?
ncovars <- length(covars)
#s-learner #####
feat <- dplyr::select(train_dat, c(W, S, all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
feat_cf <- feat %>%
mutate(W = as.numeric(W == 0)) #swap control and treatment for test data
y <- as.numeric(train_dat$Y)
#run bart
set.seed(2)
sbart <- dbarts::bart(x.train=as.matrix(feat), y.train=y, x.test=as.matrix(feat_cf), keeptrees=T)
sbart_ci <- function(train_dat, sbart) {
#get means and variance for each person
w <- train_dat$W
means <- apply(sbart$yhat.train, 2, mean)
means_cf <- apply(sbart$yhat.test, 2, mean)
vars <- apply(sbart$yhat.train, 2, var)
vars_cf <- apply(sbart$yhat.test, 2, var)
#estimate cate and interval
mu1 <- w*means + (1-w)*means_cf
mu0 <- (1-w)*means + w*means_cf
means_cate <- mu1 - mu0
vars_cate <- vars + vars_cf
#add to dataframe
cis <- train_dat %>%
mutate(mean = means_cate,
lower = means_cate - 1.96*sqrt(vars_cate),
upper = means_cate + 1.96*sqrt(vars_cate))
return(cis)
}
sbart_target <- function(K, target_dat, sbart, covars) {
#set up one row per study for all rows of target data
new_dat <- target_dat %>%
slice(rep(1:n(), each=K)) %>%
mutate(S = rep(1:K, nrow(target_dat)))
new_feat <- new_dat %>%
dplyr::select(c(W, S, all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
#define counterfactual
new_feat_cf <- new_feat %>%
mutate(W = as.numeric(W == 0))
#predict on target data
w_target <- target_dat$W
target_pred <- predict(sbart, new_feat)
target_pred_cf <- predict(sbart, new_feat_cf)
#calculate differences across all posterior draws
#get means and variance for each person
means_cate_target <- lower_cate_target <- upper_cate_target <- c()
for (i in 1:nrow(target_dat)) {
inds <- (K*(i-1)+1):(K*i)
pred <- c(target_pred[,inds])
pred_cf <- c(target_pred_cf[,inds])
mu1_target <- w_target[i]*mean(pred) + (1-w_target[i])*mean(pred_cf)
mu0_target <- (1-w_target[i])*mean(pred) + w_target[i]*mean(pred_cf)
mean_cate_target <- mu1_target - mu0_target
var_cate_target <- var(pred) + var(pred_cf)
means_cate_target <- c(means_cate_target, mean_cate_target)
lower_cate_target <- c(lower_cate_target,
mean_cate_target - 1.96*sqrt(var_cate_target))
upper_cate_target <- c(upper_cate_target,
mean_cate_target + 1.96*sqrt(var_cate_target))
}
#add to target data
cis <- target_dat %>%
mutate(mean = means_cate_target,
lower = lower_cate_target,
upper = upper_cate_target)
return(cis)
}
bart_train <- sbart_ci(train_dat, sbart)
bart_train
#calculate mse
train_mse <- mean((train_dat$mean - train_dat$tau)^2)
#calculate coverage
train_coverage <- sum(train_dat$tau >= train_dat$lower & train_dat$tau <= train_dat$upper)/nrow(train_dat)
train_mse
train_coverage
mean((bart_train$mean - bart_train$tau)^2)
sum(bart_train$tau >= bart_train$lower & bart_train$tau <= bart_train$upper)/nrow(bart_train)
bart_target <- sbart_target(K, target_dat, sbart, covars)
bart_target
mean((bart_target$mean - bart_target$tau)^2)
sum(bart_target$tau >= bart_target$lower & bart_target$tau <= bart_target$upper)/nrow(bart_target)
mean(bart_train$upper - bart_train$lower)
mean(bart_target$upper - bart-target$lower)
mean(bart_target$upper - bart_target$lower)
#check results for all methods ####
assess_interval <- function(train_dat, target_dat) {
#calculate mse
train_mse <- mean((train_dat$mean - train_dat$tau)^2)
target_mse <- mean((target_dat$mean - target_dat$tau)^2)
#calculate coverage
train_coverage <- sum(train_dat$tau >= train_dat$lower & train_dat$tau <= train_dat$upper)/nrow(train_dat)
target_coverage <- sum(target_dat$tau >= target_dat$lower & target_dat$tau <= target_dat$upper)/nrow(target_dat)
#calculate length
train_length <- mean(train_dat$upper - train_dat$lower)
target_length <- mean(target_dat$upper - target_dat$lower)
#calculate signficance
train_significance <- sum(sign(train_dat$lower) == sign(train_dat$upper))/nrow(train_dat)
target_significance <- sum(sign(target_dat$lower) == sign(target_dat$upper))/nrow(target_dat)
return(c(train_mse = train_mse, target_mse = target_mse,
train_coverage = train_coverage, target_coverage = target_coverage,
train_length = train_length, target_length = target_length,
train_significance = train_significance, target_significance = target_significance))
}
assess_interval(bart_train, bart_target)
#t-learner #####
#define two model setups
tlearn_setup <- function(train_dat, covars, w) {
mod_dat <- train_dat %>% filter(W == w)
feat <- mod_dat %>%
dplyr::select(c(S, all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
y <- as.numeric(mod_dat$Y)
return(list(mod_dat=mod_dat, feat=feat, y=y))
}
#m1
m1_setup <- tlearn_setup(train_dat, covars, w=1)
m1_setup
#t-learner #####
#define two model setups
tlearn_setup <- function(train_dat, covars, w) {
mod_dat <- train_dat %>% filter(W == w)
feat <- mod_dat %>%
dplyr::select(c(S, all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
feat_cf <- feat %>% mutate(W = as.numeric(W == 0))
y <- as.numeric(mod_dat$Y)
return(list(mod_dat=mod_dat, feat=feat, y=y))
}
#m1
m1_setup <- tlearn_setup(train_dat, covars, w=1)
#t-learner #####
#define two model setups
tlearn_setup <- function(train_dat, covars, w) {
mod_dat <- train_dat %>% filter(W == w)
feat <- mod_dat %>%
dplyr::select(c(S, all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
y <- as.numeric(mod_dat$Y)
return(list(mod_dat=mod_dat, feat=feat, y=y))
}
#m1
m1_setup <- tlearn_setup(train_dat, covars, w=1)
summary(m1_setup[["mod_dat"]]$W)
summary(m0_setup[["mod_dat"]]$W)
#m0
m0_setup <- tlearn_setup(train_dat, covars, w=0)
summary(m0_setup[["mod_dat"]]$W)
tbart1 <- dbarts::bart(x.train = as.matrix(m1_setup[["feat"]]), y.train = m1_setup[["y"]],
x.test = as.matrix(m0_setup[["feat"]]), keeptrees = T)
tbart1$yhat.train
tbart1$yhat.train %>% dim()
#treated people: Y1 - m0(X1), so use training outcome from tbart1 and testing outcome from tbart0
w <- train_dat$W
#m0
m0_setup <- tlearn_setup(train_dat, covars, w=0)
tbart0 <- dbarts::bart(x.train = as.matrix(m0_setup[["feat"]]), y.train = m0_setup[["y"]],
x.test = as.matrix(m1_setup[["feat"]]), keeptrees = T)
apply(tbart0$yhat.train, 2, mean) %>% summary
tbart0$yhat.train.mean %>% summary
apply(tbart0$yhat.train, 2, mean) == tbart0$yhat.train.mean
#treated people: Y1 - m0(X1), so use training outcome from tbart1 and testing outcome from tbart0
#control people: m1(X0) - Y0, so use testing outcome from tbart1 and training outcome from tbart0
w <- train_dat$W
means1 <- tbart1$yhat.train.mean
means0_cf <- tbart1$yhat.test.mean
means0 <- tbart0$yhat.train.mean
means1_cf <- tbart0$yhat.test.mean
vars1 <- apply(tbart1$yhat.train, 2, var)
vars0_cf <- apply(tbart1$yhat.test, 2, var)
vars0 <- apply(tbart0$yhat.train, 2, var)
vars1_cf <- apply(tbart0$yhat.test, 2, var)
#estimate cate and interval
mu1 <- w*means1 + (1-w)*means0_cf
mu0 <- (1-w)*means0 + w*means1_cf
means_cate <- mu1 - mu0
length(w)
length(means1)
length(means0)
length(means1_cf)
head(m0_setup[["feat"]])
names(target_at)
names(target_dat)
names(m1_setup[["mod_dat"]])
names(train_dat)
#treated people: Y1 - m0(X1), so use training outcome from tbart1 and testing outcome from tbart0
#control people: m1(X0) - Y0, so use testing outcome from tbart1 and training outcome from tbart0
cate1 <- tbart1$yhat.train.mean - tbart0$yhat.test.mean
cate0 <- tbart1$yhat.test.mean - tbart0$yhat.train.mean
var1 <- apply(tbart1$yhat.train, 2, var) + apply(tbart0$yhat.test, 2, var)
var0 <- apply(tbart1$yhat.test, 2, var) + apply(tbart0$yhat.train, 2, var)
#add to dataframe
cis <- m1_setup[["mod_dat"]] %>%
bind_rows(m0_setup[["mod_dat"]]) %>%
mutate(mean = c(cate1, cate0),
lower = c(cate1 - 1.96*sqrt(var1), cate0 - 1.96*sqrt(var0)),
upper = c(cate1 + 1.96*sqrt(var1), cate0 + 1.96*sqrt(var0)))
#reorder to match target data
cis_ord <- target_dat %>%
left_join(cis, by = c(names(train_dat)))
#reorder to match target data
cis_ord <- train_dat %>%
left_join(cis, by = c(names(train_dat)))
View(cis_ord)
mean((cis_ord$tau - cis_ord$mean)^2)
sum(cis_ord$tau <= cis_ord$upper & cis_ord$tau >= cis_ord$lower)
sum(cis_ord$tau <= cis_ord$upper & cis_ord$tau >= cis_ord$lower)/500
library(tidyverse)
library(BayesTree)
library(dbarts)
source("R/MDD_Generation_OOSEst.R")
source("R/MA_OOSEst.R")
source("R/Bootstrap_OOSEst.R")
source("R/Comparing_OOSEst.R")
#generate dataset using defaults
K <- 5
sim_dat <- gen_mdd(K=5, n_mean=100)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
#define covariates (ignore age^2 for now)
covars <- c("sex","smstat","weight","age","madrs")  #how to treat S as categorical?
ncovars <- length(covars)
#t-learner #####
#define two model setups
tlearn_setup <- function(train_dat, covars, w) {
mod_dat <- train_dat %>% filter(W == w)
feat <- mod_dat %>%
dplyr::select(c(S, all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
y <- as.numeric(mod_dat$Y)
return(list(mod_dat=mod_dat, feat=feat, y=y))
}
#m1
m1_setup <- tlearn_setup(train_dat, covars, w=1)
tbart1 <- dbarts::bart(x.train = as.matrix(m1_setup[["feat"]]), y.train = m1_setup[["y"]],
x.test = as.matrix(m0_setup[["feat"]]), keeptrees = T)
#m0
m0_setup <- tlearn_setup(train_dat, covars, w=0)
tbart0 <- dbarts::bart(x.train = as.matrix(m0_setup[["feat"]]), y.train = m0_setup[["y"]],
x.test = as.matrix(m1_setup[["feat"]]), keeptrees = T)
#treated people: Y1 - m0(X1), so use training outcome from tbart1 and testing outcome from tbart0
#control people: m1(X0) - Y0, so use testing outcome from tbart1 and training outcome from tbart0
cate1 <- tbart1$yhat.train.mean - tbart0$yhat.test.mean
cate0 <- tbart1$yhat.test.mean - tbart0$yhat.train.mean
var1 <- apply(tbart1$yhat.train, 2, var) + apply(tbart0$yhat.test, 2, var)
var0 <- apply(tbart1$yhat.test, 2, var) + apply(tbart0$yhat.train, 2, var)
#add to dataframe
cis <- m1_setup[["mod_dat"]] %>%
bind_rows(m0_setup[["mod_dat"]]) %>%
mutate(mean = c(cate1, cate0),
lower = c(cate1 - 1.96*sqrt(var1), cate0 - 1.96*sqrt(var0)),
upper = c(cate1 + 1.96*sqrt(var1), cate0 + 1.96*sqrt(var0)))
nrow(m1_setup)
nrow(m1_setup[["mod_dat"]])
nrow(m0_setup[["mod_dat"]])
#add to dataframe
cis <- m1_setup[["mod_dat"]] %>%
bind_rows(m0_setup[["mod_dat"]]) %>%
mutate(mean = c(cate1, cate0),
lower = c(cate1 - 1.96*sqrt(var1), cate0 - 1.96*sqrt(var0)),
upper = c(cate1 + 1.96*sqrt(var1), cate0 + 1.96*sqrt(var0)))
m1_setup[["mod_dat"]] %>%
bind_rows(m0_setup[["mod_dat"]]) %>%
nrow()
length(cate1)
length(cate0)
length(var1)
length(var0)
length(tbart1$yhat.train.mean )
length(tbart0$yhat.test.mean)
length( tbart1$yhat.test.mean)
nrow(m0_setup[["feat"]]))
nrow(m0_setup[["feat"]])
#t-learner #####
#define two model setups
tlearn_setup <- function(train_dat, covars, w) {
mod_dat <- train_dat %>% filter(W == w)
feat <- mod_dat %>%
dplyr::select(c(S, all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
y <- as.numeric(mod_dat$Y)
return(list(mod_dat=mod_dat, feat=feat, y=y))
}
#m1
m1_setup <- tlearn_setup(train_dat, covars, w=1)
tbart1 <- dbarts::bart(x.train = as.matrix(m1_setup[["feat"]]), y.train = m1_setup[["y"]],
x.test = as.matrix(m0_setup[["feat"]]), keeptrees = T)
#m0
m0_setup <- tlearn_setup(train_dat, covars, w=0)
tbart0 <- dbarts::bart(x.train = as.matrix(m0_setup[["feat"]]), y.train = m0_setup[["y"]],
x.test = as.matrix(m1_setup[["feat"]]), keeptrees = T)
#treated people: Y1 - m0(X1), so use training outcome from tbart1 and testing outcome from tbart0
#control people: m1(X0) - Y0, so use testing outcome from tbart1 and training outcome from tbart0
cate1 <- tbart1$yhat.train.mean - tbart0$yhat.test.mean
cate0 <- tbart1$yhat.test.mean - tbart0$yhat.train.mean
var1 <- apply(tbart1$yhat.train, 2, var) + apply(tbart0$yhat.test, 2, var)
var0 <- apply(tbart1$yhat.test, 2, var) + apply(tbart0$yhat.train, 2, var)
#add to dataframe
cis <- m1_setup[["mod_dat"]] %>%
bind_rows(m0_setup[["mod_dat"]]) %>%
mutate(mean = c(cate1, cate0),
lower = c(cate1 - 1.96*sqrt(var1), cate0 - 1.96*sqrt(var0)),
upper = c(cate1 + 1.96*sqrt(var1), cate0 + 1.96*sqrt(var0)))
#reorder to match target data
cis_ord <- train_dat %>%
left_join(cis, by = c(names(train_dat)))
View(cis_ord)
new_feat1 <- tlearn_setup(new_dat, covars, w=1)[["feat"]]
head(new_feat1)
new_feat0 <- tlearn_setup(new_dat, covars, w=0)[["feat"]]
#define counterfactual
new_feat1_cf <- new_feat1 %>% mutate(W = 0)
new_feat0_cf <- new_feat0 %>% mutate(W = 1)
#predict on target data
target_pred1 <- predict(tbart1, new_feat1) #treated individual Y1
target_pred1_cf <- predict(tbart0, new_feat1) #treated individual Y0
target_pred0 <- predict(tbart1, new_feat0) #control individual Y1
target_pred0_cf <- predict(tbart0, new_feat0) #control individual Y0
View(target_pred1)
i=1
inds <- (K*(i-1)+1):(K*i)
pred <- c(target_pred1[,inds])
head(pred)
pred_cf <- c(target_pred1_cf[,inds])
head(pred_cf)
target_pred0_cf <- predict(tbart1, new_feat0) #control individual Y1
target_pred0 <- predict(tbart0, new_feat0) #control individual Y0
y1 <- c(target_pred1, target_pred0_cf)
y0 <- c(target_pred1_cf, target_pred0)
length(y1)
length(y0)
head(target_pred``)
head(target_pred1)
typeof(target_pred1)
y1 <- cbind(target_pred1, target_pred0_cf)
y0 <- cbind(target_pred1_cf, target_pred0)
dim(y1)
dim(y0)
nrow(new_dat)
View(y1)
nrow(target_dat)
names(target_Dat)
names(target_dat)
### next need to add setup for t-learner target data and turn into functions and add to main comparing.R ####
#target data
#set up one row per study for all rows of target data
new_dat <- target_dat %>%
slice(rep(1:n(), each=K)) %>%
mutate(S = rep(1:K, nrow(target_dat)))
new_feat1 <- tlearn_setup(new_dat, covars, w=1)[["feat"]]
new_feat0 <- tlearn_setup(new_dat, covars, w=0)[["feat"]]
#define counterfactual
new_feat1_cf <- new_feat1 %>% mutate(W = 0)
new_feat0_cf <- new_feat0 %>% mutate(W = 1)
#predict on target data
target_pred1 <- predict(tbart1, new_feat1) #treated individual Y1
target_pred1_cf <- predict(tbart0, new_feat1) #treated individual Y0
target_pred0_cf <- predict(tbart1, new_feat0) #control individual Y1
target_pred0 <- predict(tbart0, new_feat0) #control individual Y0
y1 <- cbind(target_pred1, target_pred0_cf)
y0 <- cbind(target_pred1_cf, target_pred0)
#calculate differences across all posterior draws
#get means and variance for each person
means_cate_target <- lower_cate_target <- upper_cate_target <- c()
for (i in 1:nrow(target_dat)) {
inds <- (K*(i-1)+1):(K*i)
pred1 <- c(y1[,inds])
pred0 <- c(y0[,inds])
mean_cate_target <- mean(pred1) - mean(pred0)
var_cate_target <- var(pred1) + var(pred_cf0)
means_cate_target <- c(means_cate_target, mean_cate_target)
lower_cate_target <- c(lower_cate_target,
mean_cate_target - 1.96*sqrt(var_cate_target))
upper_cate_target <- c(upper_cate_target,
mean_cate_target + 1.96*sqrt(var_cate_target))
}
#calculate differences across all posterior draws
#get means and variance for each person
means_cate_target <- lower_cate_target <- upper_cate_target <- c()
for (i in 1:nrow(target_dat)) {
inds <- (K*(i-1)+1):(K*i)
pred1 <- c(y1[,inds])
pred0 <- c(y0[,inds])
mean_cate_target <- mean(pred1) - mean(pred0)
var_cate_target <- var(pred1) + var(pred0)
means_cate_target <- c(means_cate_target, mean_cate_target)
lower_cate_target <- c(lower_cate_target,
mean_cate_target - 1.96*sqrt(var_cate_target))
upper_cate_target <- c(upper_cate_target,
mean_cate_target + 1.96*sqrt(var_cate_target))
}
means_cate_target
#add to dataframe
cis <- tlearn_setup(new_dat, covars, w=1)[["mod_dat"]] %>%
bind_rows(tlearn_setup(new_dat, covars, w=0)[["mod_dat"]]) %>%
mutate(mean = means_cate_target,
lower = lower_cate_target,
upper = upper_cate_target)
#add to dataframe
cis <- tlearn_setup(target_dat, covars, w=1)[["mod_dat"]] %>%
bind_rows(tlearn_setup(target_dat, covars, w=0)[["mod_dat"]]) %>%
mutate(mean = means_cate_target,
lower = lower_cate_target,
upper = upper_cate_target)
names(target_dat)
#add to dataframe
cis <- filter(target_dat, W == 1) %>%
bind_rows(filter(target_dat, W == 0)) %>%
mutate(mean = means_cate_target,
lower = lower_cate_target,
upper = upper_cate_target)
#reorder to match target data
cis_ord <- target_dat %>%
left_join(cis, by = c(names(target_dat)))
View(cis)
mean((cis_ord$tau - cis_ord$mean)^2)
sum(cis_ord$tau <= cis_ord$upper & cis_ord$tau >= cis_ord$lower)
