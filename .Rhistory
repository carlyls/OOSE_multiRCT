var_rand
var_rand <- var_rand[[1]]
var_rand
source("R/MDD_Generation_OOSEst.R")
#prediction interval by hand ####
#get variance components of model
matrix_var <- function(mod, rand_int=T) {
#calculate variances
fc <- vcov(mod) #covariance matrix of fixed effects
rc <- as.data.frame(VarCorr(mod)) #variance and covariances of random effects
#fixed effects
beta <- matrix(fixef(mod)[c("W","W:age")], nrow=2) #beta-hat
var_beta <- fc[c("W","W:age"),c("W","W:age")] #Var(beta-hat)
#random effects
if (rand_int == T) {
u <- ranef(mod)$S[c("W","W:age")] %>% t() %>% matrix() #u-hat
rand <- rc[c(which(rc$var1=="W" & is.na(rc$var2)==T),
which(rc$var1=="W" & rc$var2=="W:age"),
which(rc$var1=="W" & rc$var2=="W:age"),
which(rc$var1=="W:age" & is.na(rc$var2)==T)), "vcov"]
var_rand <- matrix(rand, nrow=2, dimnames=list(c("W","W:age"),c("W","W:age"))) #Var(ranef)
} else {
u <- ranef(mod)$S[c("W")] %>% t() %>% matrix() #u-hat
rand <- rc[c(which(rc$var1=="W" & is.na(rc$var2)==T)), "vcov"]
var_rand <- matrix(rand, dimnames=list(c("W"),c("W"))) #Var(ranef)
}
return(list(beta=beta, var_beta=var_beta, u=u, var_rand=var_rand))
}
#add pis to dataset
manual_pi <- function(df, mod, K, rand_int=T) {
#get variances
res <- matrix_var(mod, rand_int)
beta <- res$beta
var_beta <- res$var_beta
u <- res$u
var_rand <- res$var_rand
#calculate theta-hats
X <- df %>%
mutate(trt = 1) %>%
dplyr::select(trt, age) %>%
as.matrix() #X
if ("S" %in% names(df)) { #training data structure is different
Zlist <- list()
var_rand_train <- list()
for (s in 1:K) {
X_S <- X[df$S==s,]
if (rand_int == T) { Z_S <- X_S } else { Z_S <- X_S[,1] }
Zlist[[s]] <- Z_S
var_rand_train[[s]] <- var_rand
}
Z <- do.call("bdiag", Zlist) %>% as.matrix()
var_rand <- do.call("bdiag", var_rand_train) %>% as.matrix()
mean_theta <- X %*% beta + Z %*% u %>% c()
} else { #target data doesn't require block diagonal matrices
if (rand_int == T) { Z <- X } else { Z <- X[,1] }
mean_theta <- X %*% beta %>% c() #theta-hat
}
vcov_theta <- X %*% var_beta %*% t(X) + Z %*% var_rand %*% t(Z)
var_theta <- diag(vcov_theta) #Var(theta-hat)
#prediction interval
pred_lower <- mean_theta + qt(.025, K-2)*sqrt(var_theta)
pred_upper <- mean_theta - qt(.025, K-2)*sqrt(var_theta)
df <- df %>%
mutate(lower = pred_lower,
mean = mean_theta,
upper = pred_upper)
return(df)
}
## Simulate training and target (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, n_target, eps_study_m, eps_study_tau,
eps_study_age, distribution, target_dist)
train_dat <- sim_dat[["train_dat"]]
target_dat <- sim_dat[["target_dat"]]
## Fit mixed effects models
#correct
mod <- lmer(Y ~  madrs + sex + W*age +
(W + W:age | S), data=train_dat,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=10000)))
sum <- summary(mod)
#incorrect
mod_wrong <- lmer(Y ~  madrs + sex + W*age +
(W | S), data=train_dat,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=10000)))
sum_wrong <- summary(mod_wrong)
#manual PI
manual_train <- manual_pi(train_dat, mod, K, rand_int=T)
manual_target <- manual_pi(target_dat, mod, K, rand_int=T)
manual_res <- assess_interval(manual_train, manual_target)
#check results for all methods ####
assess_interval <- function(train_dat, target_dat) {
#calculate mse
train_mse <- mean((train_dat$mean - train_dat$tau)^2)
target_mse <- mean((target_dat$mean - target_dat$tau)^2)
#calculate coverage
train_coverage <- sum(train_dat$tau >= train_dat$lower & train_dat$tau <= train_dat$upper)/nrow(train_dat)
target_coverage <- sum(target_dat$tau >= target_dat$lower & target_dat$tau <= target_dat$upper)/nrow(target_dat)
#calculate length
train_length <- mean(train_dat$upper - train_dat$lower)
target_length <- mean(target_dat$upper - target_dat$lower)
#calculate signficance
train_significance <- sum(sign(train_dat$lower) == sign(train_dat$upper))/nrow(train_dat)
target_significance <- sum(sign(target_dat$lower) == sign(target_dat$upper))/nrow(target_dat)
return(c(train_mse = train_mse, target_mse = target_mse,
train_coverage = train_coverage, target_coverage = target_coverage,
train_length = train_length, target_length = target_length,
train_significance = train_significance, target_significance = target_significance))
}
manual_res <- assess_interval(manual_train, manual_target)
manual_ress
manual_res
a <- manual_res
#get variance components of model
matrix_var <- function(mod) {
#calculate variances
fc <- vcov(mod) #covariance matrix of fixed effects
rc <- Matrix::bdiag(VarCorr(mod)) #variance and covariances of random effects
#fixed effects
beta <- fixef(mod)[grep("W", names(fixef(mod)))] %>% matrix() #beta-hat
var_beta <- fc[grep("W", rownames(fc)),
grep("W", colnames(fc))] #Var(beta-hat)
#random effects
u <- ranef(mod)$S[grep("W", colnames(ranef(mod)$S))] %>% t() %>% matrix()
var_rand <- rc[grep("W", rownames(rc)),
grep("W", colnames(rc))]
return(list(beta=beta, var_beta=var_beta, u=u, var_rand=var_rand))
}
#add pis to dataset
manual_pi <- function(df, mod, K, covars_fix, covars_rand) {
#get variances
res <- matrix_var(mod)
beta <- res$beta
var_beta <- res$var_beta
u <- res$u
var_rand <- res$var_rand
#calculate theta-hats
X <- df %>%
dplyr::select(W, all_of(covars_fix)) %>%
mutate(W = 1) %>%
as.matrix()
Z <- df %>%
dplyr::select(W, all_of(covars_rand)) %>%
mutate(W = 1) %>%
as.matrix()
if ("S" %in% names(df)) { #training data structure is different
Zlist <- list()
var_rand_train <- rep(list(var_rand), K)
var_rand <- do.call("bdiag", var_rand_train) %>% as.matrix()
for (s in 1:K) {
Z_S <- Z[df$S==s,]
Zlist[[s]] <- Z_S
}
Z <- do.call("bdiag", Zlist) %>% as.matrix()
mean_theta <- X %*% beta + Z %*% u %>% c()
} else { #don't know u's for target data
mean_theta <- X %*% beta %>% c() #theta-hat
}
vcov_theta <- X %*% var_beta %*% t(X) + Z %*% var_rand %*% t(Z)
var_theta <- diag(vcov_theta) #Var(theta-hat)
#prediction interval
pred_lower <- mean_theta + qt(.025, K-2)*sqrt(var_theta)
pred_upper <- mean_theta - qt(.025, K-2)*sqrt(var_theta)
df <- df %>%
mutate(lower = pred_lower,
mean = mean_theta,
upper = pred_upper)
return(df)
}
manual_train <- manual_pi(train_dat, mod, K, covars_fix, covars_rand)
manual_target <- manual_pi(target_dat, mod, K, covars_fix, covars_rand)
manual_res <- assess_interval(manual_train, manual_target)
manual_res
a
df <- target_dat
#get variances
res <- matrix_var(mod)
beta <- res$beta
var_beta <- res$var_beta
u <- res$u
var_rand <- res$var_rand
#calculate theta-hats
X <- df %>%
dplyr::select(W, all_of(covars_fix)) %>%
mutate(W = 1) %>%
as.matrix()
Z <- df %>%
dplyr::select(W, all_of(covars_rand)) %>%
mutate(W = 1) %>%
as.matrix()
head(X)
head(Z)
if ("S" %in% names(df)) { #training data structure is different
Zlist <- list()
var_rand_train <- rep(list(var_rand), K)
var_rand <- do.call("bdiag", var_rand_train) %>% as.matrix()
for (s in 1:K) {
Z_S <- Z[df$S==s,]
Zlist[[s]] <- Z_S
}
Z <- do.call("bdiag", Zlist) %>% as.matrix()
mean_theta <- X %*% beta + Z %*% u %>% c()
} else { #don't know u's for target data
mean_theta <- X %*% beta %>% c() #theta-hat
}
head(Z)
head(mean_theta)
beta
2.4892840-0.87771748*0.8238597
var_rand
?glm
a <- c("F32.2", "F33.1, F32.2", "F45", "F44, F33.2", "F23, F32", "F33, F11.2", "F33.3, F99")
a
grepl("%F33%", a)
covars_fix <- "age"
covars_rand <- "age"
## Fit mixed effects models
#correct
formula <- as.formula(paste0("Y ~ madrs + sex + ",
paste("W", covars_fix, sep="*", collapse=" + "),
" + (W + ",
paste("W", covars_rand, sep=":", collapse=" + "),
" | S)"))
formula
covars_fix <- covars_rand <- c("age", "madrs")
## Fit mixed effects models
#correct
formula <- as.formula(paste0("Y ~ madrs + sex + ",
paste("W", covars_fix, sep="*", collapse=" + "),
" + (W + ",
paste("W", covars_rand, sep=":", collapse=" + "),
" | S)"))
formula
## Fit mixed effects models
#correct
formula <- as.formula(paste0("Y ~ madrs + sex + age + W + ",
paste("W", covars_fix, sep=":", collapse=" + "),
" + (W + ",
paste("W", covars_rand, sep=":", collapse=" + "),
" | S)"))
formula
#incorrect
formula_wrong <- as.formula(paste0("Y ~ madrs + sex + age + W + ",
paste("W", covars_fix, sep=":", collapse=" + "),
" + (W | S)"))
formula_wrong
source("R/MDD_Generation_OOSEst.R")
## Simulate training and target (OOS) data
sim_dat <- gen_mdd(K, n_mean, n_sd, n_target, eps_study_m, eps_study_tau,
eps_study_age, distribution, target_dist, covars_fix, covars_rand)
covars_fix
K=10
n_mean=500
n_sd=0
n_target=100
eps_study_m=0.05
eps_study_tau=0.05
target_dist="same"
distribution="same"
eps_study_inter=c(0.05,0.05)
#training data
train_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
#define covariance matrix
Sigma <- data.frame(age=c(165.6471, 0.2448, -0.5180, 1.6408, -0.9666),
sex=c(0.2448, 0.2183, -0.0218, -1.9030, 0.1380),
smstat=c(-0.5180, -0.0218, 0.2118, -0.1429, 0.1155),
weight=c(1.6408, -1.9030, -0.1428, 452.6100, -7.6864),
madrs=c(-0.9666, 0.1380, 0.1155, -7.6864, 17.5343),
row.names=c("age","sex","smstat","weight","madrs"))
eps_study_inter
names(eps_inter)
names(eps_study_inter)
?data.frame
#simulate data
eps_inter <- data.frame(names = covars_rand)
eps_inter
length(covars_rand)
#simulate data
eps_inter <- data.frame()
for (i in 1:length(covars_rand)) {
eps_inter[,i] <- rnorm(n=1, mean=0, sd=eps_study_inter[i])
}
#simulate data
eps_inter <- c()
for (i in 1:length(covars_rand)) {
eps_inter[,i] <- rnorm(n=1, mean=0, sd=eps_study_inter[i])
}
eps_study_inter[1]
#simulate data
eps_inter <- matrix(nrow=n, ncol=length(covars_rand))
n=500
#simulate data
eps_inter <- matrix(nrow=n, ncol=length(covars_rand))
eps_inter
for (i in 1:length(covars_rand)) {
eps_inter[,i] <- rnorm(n=1, mean=0, sd=eps_study_inter[i])
}
head(eps_inter)
#simulate data
eps_inter <- matrix(nrow=n, ncol=length(covars_rand))
colnames(eps_inter) <- covars_rand
for (i in 1:length(covars_rand)) {
eps_inter[,i] <- rnorm(n=1, mean=0, sd=eps_study_inter[i])
}
eps_inter
dat <- MASS::mvrnorm(n=n, mu=mu, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(S = k,
sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n, mean=0, sd=.05),
W = rbinom(n=n, size=1, prob=.5),
eps_m = rnorm(n=1, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=1, mean=0, sd=eps_study_tau)) %>%
bind_cols(eps_inter)
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
dat <- MASS::mvrnorm(n=n, mu=mu, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(S = k,
sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n, mean=0, sd=.05),
W = rbinom(n=n, size=1, prob=.5),
eps_m = rnorm(n=1, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=1, mean=0, sd=eps_study_tau)) %>%
bind_cols(eps_inter)
k=1
dat <- MASS::mvrnorm(n=n, mu=mu, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(S = k,
sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n, mean=0, sd=.05),
W = rbinom(n=n, size=1, prob=.5),
eps_m = rnorm(n=1, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=1, mean=0, sd=eps_study_tau)) %>%
bind_cols(eps_inter)
#simulate data
eps_inter <- matrix(nrow=n, ncol=length(covars_rand))
colnames(eps_inter) <- paste0("eps_study_",covars_rand)
for (i in 1:length(covars_rand)) {
eps_inter[,i] <- rnorm(n=1, mean=0, sd=eps_study_inter[i])
}
head(eps_inter)
dat <- MASS::mvrnorm(n=n, mu=mu, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(S = k,
sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n, mean=0, sd=.05),
W = rbinom(n=n, size=1, prob=.5),
eps_m = rnorm(n=1, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=1, mean=0, sd=eps_study_tau)) %>%
bind_cols(eps_inter)
head(dat)
#interior function
sample_dist <- function(K, k, n, Sigma, eps_study_m, eps_study_tau, eps_study_inter, distribution) {
#define mu based on distribution input
if (distribution == "same") {
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
} else if (distribution == "varying_madrs") {
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088-k*1.5)
} else if (distribution == "halfdiff_madrsage") {
if (k%%2 == 0 ) {
mu <- c(age=50, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=40)
} else {
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
}
} else if (distribution == "separate_age") {
ages <- seq(30, 55, length.out=K)
mu <- c(age=ages[k], sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
}
#define random slopes for moderators
eps_inter <- matrix(nrow=n, ncol=length(covars_rand))
colnames(eps_inter) <- paste0("eps_study_",covars_rand)
for (i in 1:length(covars_rand)) {
eps_inter[,i] <- rnorm(n=1, mean=0, sd=eps_study_inter[i])
}
#simulate data
dat <- MASS::mvrnorm(n=n, mu=mu, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(S = k,
sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n, mean=0, sd=.05),
W = rbinom(n=n, size=1, prob=.5),
eps_m = rnorm(n=1, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=1, mean=0, sd=eps_study_tau)) %>%
bind_cols(eps_inter)
return(dat)
}
#training data
train_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
#define covariance matrix
Sigma <- data.frame(age=c(165.6471, 0.2448, -0.5180, 1.6408, -0.9666),
sex=c(0.2448, 0.2183, -0.0218, -1.9030, 0.1380),
smstat=c(-0.5180, -0.0218, 0.2118, -0.1429, 0.1155),
weight=c(1.6408, -1.9030, -0.1428, 452.6100, -7.6864),
madrs=c(-0.9666, 0.1380, 0.1155, -7.6864, 17.5343),
row.names=c("age","sex","smstat","weight","madrs"))
for (k in 1:K) {
n <- n_study[k]
#sample
dat <- sample_dist(K, k, n, Sigma, eps_study_m, eps_study_tau, eps_study_inter, distribution)
train_dat <- bind_rows(train_dat, dat)
}
View(train_dat)
target_dat <- train_dat[sample(nrow(train_dat), n_target),] %>%
dplyr::select(-S, -eps_m, -eps_tau, -eps_age)
#interior function
sample_dist <- function(K, k, n, Sigma, eps_study_m, eps_study_tau, eps_study_inter, distribution) {
#define mu based on distribution input
if (distribution == "same") {
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
} else if (distribution == "varying_madrs") {
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088-k*1.5)
} else if (distribution == "halfdiff_madrsage") {
if (k%%2 == 0 ) {
mu <- c(age=50, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=40)
} else {
mu <- c(age=44.8971, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
}
} else if (distribution == "separate_age") {
ages <- seq(30, 55, length.out=K)
mu <- c(age=ages[k], sex=0.6784, smstat=0.3043, weight=79.0253, madrs=31.4088)
}
#define random slopes for moderators
eps_inter <- matrix(nrow=n, ncol=length(covars_rand))
colnames(eps_inter) <- paste0("eps_",covars_rand)
for (i in 1:length(covars_rand)) {
eps_inter[,i] <- rnorm(n=1, mean=0, sd=eps_study_inter[i])
}
#simulate data
dat <- MASS::mvrnorm(n=n, mu=mu, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(S = k,
W = rbinom(n=n, size=1, prob=.5),
sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n, mean=0, sd=.05),
eps_m = rnorm(n=1, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=1, mean=0, sd=eps_study_tau)) %>%
bind_cols(eps_inter)
return(dat)
}
#training data
train_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
#define covariance matrix
Sigma <- data.frame(age=c(165.6471, 0.2448, -0.5180, 1.6408, -0.9666),
sex=c(0.2448, 0.2183, -0.0218, -1.9030, 0.1380),
smstat=c(-0.5180, -0.0218, 0.2118, -0.1429, 0.1155),
weight=c(1.6408, -1.9030, -0.1428, 452.6100, -7.6864),
madrs=c(-0.9666, 0.1380, 0.1155, -7.6864, 17.5343),
row.names=c("age","sex","smstat","weight","madrs"))
for (k in 1:K) {
n <- n_study[k]
#sample
dat <- sample_dist(K, k, n, Sigma, eps_study_m, eps_study_tau, eps_study_inter, distribution)
train_dat <- bind_rows(train_dat, dat)
}
target_dat <- train_dat[sample(nrow(train_dat), n_target),] %>%
dplyr::select(-S, -contains("eps_"))
head(target_dat)
target_mean <- c(age=30, sex=0.6784, smstat=0.3043, weight=79.0253, madrs=25)
target_dat <- MASS::mvrnorm(n=n_target, mu=target_mean, Sigma=Sigma) %>%
as.data.frame() %>%
mutate(sex = ifelse(sex > 1-0.6784, 1, 0),
smstat = ifelse(smstat > 1-0.3043, 1, 0),
eps = rnorm(n=n_target, mean=0, sd=.05),
W = rbinom(n=n_target, size=1, prob=.5))
head(target_dat)
target_dat <- train_dat[sample(nrow(train_dat), n_target),] %>%
dplyr::select(-S, -contains("eps_"))
#define random slopes for moderators in target sample
eps_inter_target <- matrix(nrow=n_target, ncol=length(covars_rand))
eps_inter_target
colnames(eps_inter_target) <- paste0("eps_",covars_rand)
#define random slopes for moderators in target sample
eps_inter_target <- matrix(nrow=n_target, ncol=length(covars_rand))
colnames(eps_inter_target) <- paste0("eps_",covars_rand)
for (i in 1:length(covars_rand)) {
eps_inter_target[,i] <- rnorm(n=n_target, mean=0, sd=eps_study_inter[i])
}
head(eps_inter_target)
#define random slopes for moderators in target sample
eps_inter_target <- matrix(nrow=n_target, ncol=length(covars_rand))
colnames(eps_inter_target) <- paste0("eps_",covars_rand)
for (i in 1:length(covars_rand)) {
eps_inter_target[,i] <- rnorm(n=n_target, mean=0, sd=eps_study_inter[i])
}
#add error terms to target sample
target_dat <- target_dat %>%
mutate(eps_m = rnorm(n=n_target, mean=0, sd=eps_study_m),
eps_tau = rnorm(n=n_target, mean=0, sd=eps_study_tau)) %>%
bind_cols(eps_inter_target)
head(target_dat)
covars_fix = "age" & covars_rand = "age"
covars_fix == "age" & covars_rand == "age"
covars_fix
covars_fix == "age"
covars_fix == "age" && covars_rand == "age"
covars_fix == c("age")
dim(covars_fix) = dim_covars(rand) == 1
dim(covars_fix) = dim(covars_rand) == 1
dim(covars_fix) == 1 & dim(covars_rand) ==
1
dim(covars_fix) ==1
length(covars_fix) == 1 & length(covars_rand) == 1
length(covars_fix) == 1 & length(covars_rand) == 1 & covars_fix == "age" & covars_rand == "age"
head(train_dat)
covars_fix == c("age", "madrs")
