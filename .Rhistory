slice(rep(1:n(), each=N)) %>%
mutate(S = S_mem) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
#predict CATE
new_mem$tau_hat <- predict(tau_forest, newdata = new_mem)$predictions
#create confidence intervals
new_mem_sum <- new_mem %>%
group_by(X1,X2,X3,X4,X5) %>%
summarise(mean = mean(tau_hat),
sd = sd(tau_hat)) %>%
mutate(lower = mean + qt(.025, df=N-1)*sd/sqrt(N),
upper = mean + qt(.975, df=N-1)*sd/sqrt(N))
new
#assign study
new_default <- new %>%
mutate(S = NA)
new_default
mutate(S = factor(NA, levels=1:10)
#assign study
new_default <- new %>%
#assign study
new_default <- new %>%
mutate(S = factor(NA, levels=1:10))
new_default
#assign study
new_default <- new %>%
mutate(S = factor(NA, levels=1:10)) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
new_default
#assign study
new_default <- new %>%
mutate(S = factor(NA, levels=1:10)) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T, ignore_na = T)
new_default
sim_dat
feat
predict(tau_forest, newdata = new_default)
%>% head()
predict(tau_forest, newdata = new_default) %>% head()
?predict.causal_forest
#predict CATE
cate_default <- predict(tau_forest, newdata = new_default, estimate.variance = T)
head(cate_default)
new_default$tau_hat <- cate_default$predictions
nrow(new_default)
nrow(cate_default)
#assign study
new_default <- new %>%
slice(rep(1:n(), each=N)) %>%
mutate(S = factor(NA, levels=1:10)) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T, ignore_na = T)
#predict CATE
cate_default <- predict(tau_forest, newdata = new_default, estimate.variance = T)
head(cate_default)
qt(.025, df=N-1)
#assign study
#we don't need to replicate because we will get the same prediction each time
new_default <- new %>%
mutate(S = factor(NA, levels=1:10)) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T, ignore_na = T)
#predict CATE
cate_default <- predict(tau_forest, newdata = new_default, estimate.variance = T)
new_default$tau_hat <- cate_default$predictions
head(new_default)
new_default$sd <- sqrt(cate_default$variance.estimates)
head(new_default)
new_default$mean <- cate_default$predictions
#create confidence intervals
new_default_sum <- new_default %>%
mutate(lower = mean + qt(.025, df=N-1)*sd/sqrt(N),
upper = mean + qt(.975, df=N-1)*sd/sqrt(N))
new_default_sum
## Simulate dataset
K <- 10
sim_dat <- gen_data(K=K, n_mean=500, n_sd=0, study_mean=0, study_inter_mean=0,
study_sd=.5, study_inter_sd=0, scenario="1a")
covars <- grep("^X", names(sim_dat), value=TRUE)
feat <- select(sim_dat, c(S,all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
feat_nostudy <- select(sim_dat, all_of(covars))
tr <- sim_dat$W
y <- sim_dat$Y
tau_true <- sim_dat$tau
## Fit models (for now, causal forest with pooling with trial indicator)
tau_forest <- causal_forest(X=feat, Y=y, W=tr, num.threads=3, honesty=F, num.trees=1000)
tau_hat <- predict(tau_forest)$predictions
library(tidyverse)
library(causalToolbox)
library(rsample)
library(rpart)
library(ranger)
library(glmnet)
library(grf)
library(fastDummies)
library(lme4)
library(nnet)
source("Comparing_methods_functions.R")
source("Simulation_MLOptions.R")
## Simulate dataset
K <- 10
sim_dat <- gen_data(K=K, n_mean=500, n_sd=0, study_mean=0, study_inter_mean=0,
study_sd=.5, study_inter_sd=0, scenario="1a")
covars <- grep("^X", names(sim_dat), value=TRUE)
feat <- select(sim_dat, c(S,all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
feat_nostudy <- select(sim_dat, all_of(covars))
tr <- sim_dat$W
y <- sim_dat$Y
tau_true <- sim_dat$tau
## Fit models (for now, causal forest with pooling with trial indicator)
tau_forest <- causal_forest(X=feat, Y=y, W=tr, num.threads=3, honesty=F, num.trees=1000)
tau_hat <- predict(tau_forest)$predictions
nrow(sim_dat)
## Define new sample grid
N <- 100
new <- expand.grid(X1=seq(0, 3, by=1),
X2=seq(0, 3, by=1),
X3=seq(0, 3, by=1),
X4=seq(0, 3, by=1),
X5=seq(0, 3, by=1))
#assign study
new_rand <- new %>%
slice(rep(1:n(), each=N)) %>%
mutate(S = sample(1:K, nrow(new)*N, replace = T)) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
#predict CATE
new_rand$tau_hat <- predict(tau_forest, newdata = new_rand)$predictions
#create confidence intervals
new_rand_sum <- new_rand %>%
group_by(X1,X2,X3,X4,X5) %>%
summarise(mean = mean(tau_hat),
sd = sd(tau_hat)) %>%
mutate(lower = mean + qt(.025, df=N-1)*sd/sqrt(N),
upper = mean + qt(.975, df=N-1)*sd/sqrt(N))
#should I include the outcome? Then will need to simulate Y in the new dataset
mem_mod <- multinom(S ~ X1 + X2 + X3 + X4 + X5, data=sim_dat)
summary(mem_mod)
#define probabilities
mem_probs <- predict(mem_mod, newdata = new, type = "probs")
S_mem <- c()
for (i in 1:nrow(mem_probs)) {
S_mem <- c(S_mem, sample(1:K, N, replace=T, prob=mem_probs[i,]))
}
#assign study
new_mem <- new %>%
slice(rep(1:n(), each=N)) %>%
mutate(S = S_mem) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
#predict CATE
new_mem$tau_hat <- predict(tau_forest, newdata = new_mem)$predictions
#create confidence intervals
new_mem_sum <- new_mem %>%
group_by(X1,X2,X3,X4,X5) %>%
summarise(mean = mean(tau_hat),
sd = sd(tau_hat)) %>%
mutate(lower = mean + qt(.025, df=N-1)*sd/sqrt(N),
upper = mean + qt(.975, df=N-1)*sd/sqrt(N))
#assign study
#we don't need to replicate because we will get the same prediction each time
new_default <- new %>%
mutate(S = factor(NA, levels=1:10)) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T, ignore_na = T)
#predict CATE
cate_default <- predict(tau_forest, newdata = new_default, estimate.variance = T)
new_default$mean <- cate_default$predictions
new_default$sd <- sqrt(cate_default$variance.estimates)
#create confidence intervals
new_default_sum <- new_default %>%
mutate(lower = mean + qt(.025, df=N-1)*sd/sqrt(N),
upper = mean + qt(.975, df=N-1)*sd/sqrt(N))
new_mem_sum
new_rand_sum
new_mem_sum
?truncnorm
??truncnorm
library(truncnorm)
all_dat <- data.frame()
K=10
n_mean=100
n_sd=0
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
n_study
ncovar=5
#sample covariates
dat <- data.frame(matrix(rnorm(n*ncovar), nrow=n, ncol=ncovar))
?rbinom
rbinom(n=n, size=1, prob=.65)
n=100
rbinom(n=n, size=1, prob=.65)
rbinom(n=n, size=1, prob=.65) %>% table()
rbinom(n=n, size=1, prob=.65) dplyr::%>% table()
library(tidyverse)
library(rsample)
library(truncnorm)
rbinom(n=n, size=1, prob=.65) dplyr::%>% table()
rbinom(n=n, size=1, prob=.65) %>% table()
rbinom(n=n, size=1, prob=.65) %>% table()
rbinom(n=n, size=1, prob=.65) %>% table()
rbinom(n=n, size=1, prob=.65) %>% table()
?rlnorm
#sample covariates
dat <- data.frame(
age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10)
sex = rbinom(n=n, size=1, prob=.65)
6*1.5
1.5
?mod
mod(100,2)
rtruncnorm(n=n, a=30, b=75, mean=50, sd=10)
rtruncnorm(n=n, a=30, b=75, mean=50, sd=10) %>% hist()
rtruncnorm(n=n, a=18, b=75, mean=45, sd=10) %>% hist()
rtruncnorm(n=n, a=30, b=60, mean=40, sd=4.1) %>% hist()
seq(18,.75)
seq(18,75)
seq(18,75,by=10)
seq(18,75,by=(75-18)/10)
seq(18,75,by=(75-18)/11)
75-18
seq(18,75,by=(75-18)/9)
seq(18,75,by=(75-18)/6)
75-18
seq(18,75,by=(75-18)/10)
seq(18,75,by=(75-18)/10)[1]
seq(18,75,by=(75-18)/10)[2]
gen_data <- function (K, n_mean, n_sd, study_mean, study_inter_mean,
study_sd, study_inter_sd, scenario, distribution,
sd=sqrt(0.5)) {
all_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
for (k in 1:K) {
n <- n_study[k]
#sample covariates
dat <- data.frame(
#age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
sex = rbinom(n=n, size=1, prob=.65),
smstat = rbinom(n=n, size=1, prob=.3),
weight = rlnorm(n=n, meanlog=4.37, sdlog=.25),
#madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1),
W = rbinom(n=n, size=1, prob=.5),
S = rep(k, n),
id = seq(1, n),
eps = rnorm(n, mean=0, sd=.05)
)
#add age and madrs
if (distribution == "same") {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1))
} else if (distribution == "varying_madrs") {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
madrs = rtruncnorm(n=n, a=26-k*1.5, b=60-k*1.5, mean=31-k*1.5, sd=4.1))
} else if (distribution == "halfdiff_madrsage") {
if (k%%2 == 0 ) {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=30, b=75, mean=50, sd=10),
madrs = rtruncnorm(n=n, a=30, b=60, mean=40, sd=4.1))
} else {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1))
}
} else if (distribution == "separate_age") {
ages <- seq(18,75,by=(75-18)/10)
dat <- dat %>%
mutate(age = runif(n=n, min=ages[k], max=ages[k+1]),
madrs = rtruncnorm(n=n, a=30, b=60, mean=31, sd=4.1))
}
all_dat <- bind_rows(all_dat, dat)
}
}
gen_data <- function (K=6, n_mean=200, n_sd=0, scenario="1a",
distribution="same") {
all_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
for (k in 1:K) {
n <- n_study[k]
#sample covariates
dat <- data.frame(
#age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
sex = rbinom(n=n, size=1, prob=.65),
smstat = rbinom(n=n, size=1, prob=.3),
weight = rlnorm(n=n, meanlog=4.37, sdlog=.25),
#madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1),
W = rbinom(n=n, size=1, prob=.5),
S = rep(k, n),
id = seq(1, n),
eps = rnorm(n, mean=0, sd=.05)
)
#add age and madrs
if (distribution == "same") {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1))
} else if (distribution == "varying_madrs") {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
madrs = rtruncnorm(n=n, a=26-k*1.5, b=60-k*1.5, mean=31-k*1.5, sd=4.1))
} else if (distribution == "halfdiff_madrsage") {
if (k%%2 == 0 ) {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=30, b=75, mean=50, sd=10),
madrs = rtruncnorm(n=n, a=30, b=60, mean=40, sd=4.1))
} else {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1))
}
} else if (distribution == "separate_age") {
ages <- seq(18,75,by=(75-18)/10)
dat <- dat %>%
mutate(age = runif(n=n, min=ages[k], max=ages[k+1]),
madrs = rtruncnorm(n=n, a=30, b=60, mean=31, sd=4.1))
}
all_dat <- bind_rows(all_dat, dat)
}
}
gen_data
dat1 <- gen_data()
dat2 <- gen_data(distribution="varying_madrs")
dat3 <- gen_data("halfdiff_madrsage")
dat3 <- gen_data(distribution="halfdiff_madrsage")
dat4 <- gen_data(distribution="separate_age")
View(dat1)
gen_data <- function (K=6, n_mean=200, n_sd=0, scenario="1a",
distribution="same") {
all_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
for (k in 1:K) {
n <- n_study[k]
#sample covariates
dat <- data.frame(
#age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
sex = rbinom(n=n, size=1, prob=.65),
smstat = rbinom(n=n, size=1, prob=.3),
weight = rlnorm(n=n, meanlog=4.37, sdlog=.25),
#madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1),
W = rbinom(n=n, size=1, prob=.5),
S = rep(k, n),
id = seq(1, n),
eps = rnorm(n, mean=0, sd=.05)
)
#add age and madrs
if (distribution == "same") {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1))
} else if (distribution == "varying_madrs") {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
madrs = rtruncnorm(n=n, a=26-k*1.5, b=60-k*1.5, mean=31-k*1.5, sd=4.1))
} else if (distribution == "halfdiff_madrsage") {
if (k%%2 == 0 ) {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=30, b=75, mean=50, sd=10),
madrs = rtruncnorm(n=n, a=30, b=60, mean=40, sd=4.1))
} else {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1))
}
} else if (distribution == "separate_age") {
ages <- seq(18,75,by=(75-18)/10)
dat <- dat %>%
mutate(age = runif(n=n, min=ages[k], max=ages[k+1]),
madrs = rtruncnorm(n=n, a=30, b=60, mean=31, sd=4.1))
}
all_dat <- bind_rows(all_dat, dat)
}
return(all_dat)
}
dat1 <- gen_data()
dat2 <- gen_data(distribution="varying_madrs")
dat3 <- gen_data(distribution="halfdiff_madrsage")
dat4 <- gen_data(distribution="separate_age")
View(dat1)
View(dat2)
View(dat3)
hist(dat1$age)
ggplot(dat1, aes(x=age)) + geom_histogram + facet_wrap(~S)
ggplot(dat1, aes(x=age)) + geom_histogram() + facet_wrap(~S)
ggplot(dat1, aes(x=weight)) + geom_histogram() + facet_wrap(~S)
ggplot(dat2, aes(x=weight)) + geom_histogram() + facet_wrap(~S)
ggplot(dat3, aes(x=weight)) + geom_histogram() + facet_wrap(~S)
ggplot(dat4, aes(x=weight)) + geom_histogram() + facet_wrap(~S)
ggplot(dat1, aes(x=age)) + geom_histogram() + facet_wrap(~S)
table(dat1$sex)
table(dat2$sex)
table(dat3$sex)
table(dat4$sex)
table(dat4$smstat)
table(dat3$smstat)
table(dat2$smstat)
table(dat1$smstat)
table(dat1$W)
table(dat2$W)
table(dat3$W)
table(dat4$W)
table(dat1$S)
table(dat2$S)
table(dat3$S)
table(dat4$S)
ggplot(dat2, aes(x=age)) + geom_histogram() + facet_wrap(~S)
ggplot(dat3, aes(x=age)) + geom_histogram() + facet_wrap(~S)
ggplot(dat4, aes(x=age)) + geom_histogram() + facet_wrap(~S)
ggplot(dat1, aes(x=madrs)) + geom_histogram() + facet_wrap(~S)
ggplot(dat2, aes(x=madrs)) + geom_histogram() + facet_wrap(~S)
ggplot(dat3, aes(x=madrs)) + geom_histogram() + facet_wrap(~S)
ggplot(dat4, aes(x=madrs)) + geom_histogram() + facet_wrap(~S)
add_agemadrs <- function(dat, n, k, distribution) {
#add age and madrs
if (distribution == "same") {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1))
} else if (distribution == "varying_madrs") {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
madrs = rtruncnorm(n=n, a=26-k*1.5, b=60-k*1.5, mean=31-k*1.5, sd=4.1))
} else if (distribution == "halfdiff_madrsage") {
if (k%%2 == 0 ) {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=30, b=75, mean=50, sd=10),
madrs = rtruncnorm(n=n, a=30, b=60, mean=40, sd=4.1))
} else {
dat <- dat %>%
mutate(age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1))
}
} else if (distribution == "separate_age") {
ages <- seq(18,75,by=(75-18)/10)
dat <- dat %>%
mutate(age = runif(n=n, min=ages[k], max=ages[k+1]),
madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1))
}
return(dat)
}
gen_data <- function (K=6, n_mean=200, n_sd=0, scenario="1a",
distribution="same") {
all_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
for (k in 1:K) {
n <- n_study[k]
#sample covariates
dat <- data.frame(
#age = rtruncnorm(n=n, a=18, b=75, mean=45, sd=10),
sex = rbinom(n=n, size=1, prob=.65),
smstat = rbinom(n=n, size=1, prob=.3),
weight = rlnorm(n=n, meanlog=4.37, sdlog=.25),
#madrs = rtruncnorm(n=n, a=26, b=60, mean=31, sd=4.1),
W = rbinom(n=n, size=1, prob=.5),
S = rep(k, n),
id = seq(1, n),
eps = rnorm(n, mean=0, sd=.05)
)
dat <- add_agemadrs(dat, n, k, distribution)
all_dat <- bind_rows(all_dat, dat)
}
return(all_dat)
}
dat1 <- gen_data
dat1 <- gen_data()
dat2 <- gen_data(distribution="varying_madrs")
dat2 <- gen_data(distribution="halfdiff_madrsage")
dat2 <- gen_data(distribution="separate_age")
dat2 <- gen_data(distribution="varying_madrs")
dat3 <- gen_data(distribution="halfdiff_madrsage")
dat4 <- gen_data(distribution="separate_age")
ggplot(dat4, aes(x=madrs)) + geom_histogram() + facet_wrap(~S)
ggplot(dat1, aes(x=madrs)) + geom_histogram() + facet_wrap(~S)
ggplot(dat2, aes(x=madrs)) + geom_histogram() + facet_wrap(~S)
ggplot(dat3, aes(x=madrs)) + geom_histogram() + facet_wrap(~S)
ggplot(dat1, aes(x=age)) + geom_histogram() + facet_wrap(~S)
ggplot(dat2, aes(x=age)) + geom_histogram() + facet_wrap(~S)
ggplot(dat3, aes(x=age)) + geom_histogram() + facet_wrap(~S)
ggplot(dat4, aes(x=age)) + geom_histogram() + facet_wrap(~S)
View(dat1)
study_main <- runif(6, min=-14, max=-7)
study_main
data <- dat2 %>% mutate(study_main = study_main[S])
S
View(data)
data <- dat1 %>% mutate(study_main = study_main[S])
View(data)
study_inter <- runif(K, min=0.1, max=0.5)
study_inter
K
study_maiun
study_main
study_inter <- runif(K=6, min=0.1, max=0.5)
study_inter <- runif(6, min=0.1, max=0.5)
study_inter
all-dat
dat1
study_main <- runif(K, min=-14, max=-7)
study_inter <- runif(K, min=0.1, max=0.5)
K=6
study_main <- runif(K, min=-14, max=-7)
study_inter <- runif(K, min=0.1, max=0.5)
all_dat <- dat1 %>%
mutate(study_main = study_main[S],
study_inter = study_inter[S],
m = 10.7 - study_main - 0.02*age - 0.87*madrs -
0.15*sex + study_inter*madrs,
tau = -8.5 + 0.07*age + 0.20*madrs + 3*study_inter)
View(all_dat)
head(all_dat)
30*.5
30*.1
1/12*(dat1$madrs)
3/(1+exp(-1/12*(dat1$madrs))
)
